{
  "SaveName": "Crazy Eights",
  "GameMode": "Crazy Eights",
  "Date": "3/1/2021 3:52:56 AM",
  "VersionNumber": "v13.0.5",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "Table_Hexagon",
  "Sky": "Sky_Sunset",
  "Note": "",
  "Rules": "",
  "MusicPlayer": {
    "RepeatSong": false,
    "PlaylistEntry": 3,
    "CurrentAudioTitle": "Death",
    "CurrentAudioURL": "http://cloud-3.steamusercontent.com/ugc/792010997184374182/B0FF76DCB3D979C6A3A630F45A9FD58E7390D6C6/",
    "AudioLibrary": [
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184359809/DA27CF611C537C0C6A94893C0330B24358296475/",
        "Item2": "Awakening"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184371128/145B47EC47D331B4AE1CB59FDE75E0116E10280D/",
        "Item2": "Calm"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184371906/F8E4FC7CBD21DD2430F906F77055819AD0474996/",
        "Item2": "Day Travel"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184374182/B0FF76DCB3D979C6A3A630F45A9FD58E7390D6C6/",
        "Item2": "Death"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184376716/0407BB616E681D199DDEC384058B3CBF3DD3FEAD/",
        "Item2": "Epilude"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184379961/314F9E57AF4CF475B86BAF58AD5A006DB16CE86D/",
        "Item2": "Goblin Combat"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184385296/1A83AFF3AF0959546E8444D9A3F4174BC35E5336/",
        "Item2": "Human Combat 1"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184387091/0554504FC54BACCAA83CAB542EB33FC41C87346B/",
        "Item2": "Human Combat 2"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184389261/F753ACB43BA28C799B808388D6A6E4A71BDB78CB/",
        "Item2": "Intrigue"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184392871/C1ACD1C3E628B836F6DEFF643B618418A339EECC/",
        "Item2": "Map"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184394727/6212F5FF59B6D980AA95CCF1B06BE32F8DFF3366/",
        "Item2": "Mistique"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184397131/B462582B327D41981E3A3893AED045C9DFA37D68/",
        "Item2": "Night Travel"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184398544/F8246EDA891BDFDE3CE9183A139D514F78A582CF/",
        "Item2": "Orc Combat 1"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184400189/F25ADB6B0FA920C0D9F6A67546DAD85C70C9504E/",
        "Item2": "Orc Combat 2"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184402108/415A2E2F690E8241A23FBBAFB8D9BAB0D469F8F4/",
        "Item2": "Prelude"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184404898/8956C1A3A9A41B0F54B4DE400EC76F7723332310/",
        "Item2": "Reflective"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184406070/21B923240147A1785E49CAE3AFA27C045405694C/",
        "Item2": "Setting Up"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184407878/A2458FAB2EE78A3AA4B26271485982FA02665FDA/",
        "Item2": "Tension"
      },
      {
        "Item1": "http://cloud-3.steamusercontent.com/ugc/792010997184409426/32FB9FCA1D2DD24CF88150A31E16108CEB21559D/",
        "Item2": "Undead Combat"
      }
    ]
  },
  "Grid": {
    "Type": 0,
    "Lines": false,
    "Color": {
      "r": 0.0,
      "g": 0.0,
      "b": 0.0
    },
    "Opacity": 0.75,
    "ThickLines": false,
    "Snapping": false,
    "Offset": false,
    "BothSnapping": false,
    "xSize": 2.0,
    "ySize": 2.0,
    "PosOffset": {
      "x": 0.0,
      "y": 1.0,
      "z": 0.0
    }
  },
  "Lighting": {
    "LightIntensity": 0.54,
    "LightColor": {
      "r": 1.0,
      "g": 0.9804,
      "b": 0.8902
    },
    "AmbientIntensity": 1.3,
    "AmbientType": 0,
    "AmbientSkyColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientEquatorColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientGroundColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "ReflectionIntensity": 1.0,
    "LutIndex": 0,
    "LutContribution": 1.0
  },
  "Hands": {
    "Enable": true,
    "DisableUnused": false,
    "Hiding": 0
  },
  "ComponentTags": {
    "labels": [
      {
        "displayed": "",
        "normalized": ""
      },
      {
        "displayed": "",
        "normalized": ""
      }
    ]
  },
  "Turns": {
    "Enable": false,
    "Type": 0,
    "TurnOrder": [],
    "Reverse": false,
    "SkipEmpty": false,
    "DisableInteractions": false,
    "PassTurns": true,
    "TurnColor": ""
  },
  "TabStates": {
    "0": {
      "title": "Rules",
      "body": "",
      "color": "Grey",
      "visibleColor": {
        "r": 0.5,
        "g": 0.5,
        "b": 0.5
      },
      "id": 0
    },
    "1": {
      "title": "White",
      "body": "",
      "color": "White",
      "visibleColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "id": 1
    },
    "2": {
      "title": "Brown",
      "body": "",
      "color": "Brown",
      "visibleColor": {
        "r": 0.443,
        "g": 0.231,
        "b": 0.09
      },
      "id": 2
    },
    "3": {
      "title": "Red",
      "body": "",
      "color": "Red",
      "visibleColor": {
        "r": 0.856,
        "g": 0.1,
        "b": 0.094
      },
      "id": 3
    },
    "4": {
      "title": "Orange",
      "body": "",
      "color": "Orange",
      "visibleColor": {
        "r": 0.956,
        "g": 0.392,
        "b": 0.113
      },
      "id": 4
    },
    "5": {
      "title": "Yellow",
      "body": "",
      "color": "Yellow",
      "visibleColor": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.172
      },
      "id": 5
    },
    "6": {
      "title": "Green",
      "body": "",
      "color": "Green",
      "visibleColor": {
        "r": 0.192,
        "g": 0.701,
        "b": 0.168
      },
      "id": 6
    },
    "7": {
      "title": "Blue",
      "body": "",
      "color": "Blue",
      "visibleColor": {
        "r": 0.118,
        "g": 0.53,
        "b": 1.0
      },
      "id": 7
    },
    "8": {
      "title": "Teal",
      "body": "",
      "color": "Teal",
      "visibleColor": {
        "r": 0.129,
        "g": 0.694,
        "b": 0.607
      },
      "id": 8
    },
    "9": {
      "title": "Purple",
      "body": "",
      "color": "Purple",
      "visibleColor": {
        "r": 0.627,
        "g": 0.125,
        "b": 0.941
      },
      "id": 9
    },
    "10": {
      "title": "Pink",
      "body": "",
      "color": "Pink",
      "visibleColor": {
        "r": 0.96,
        "g": 0.439,
        "b": 0.807
      },
      "id": 10
    },
    "11": {
      "title": "Black",
      "body": "",
      "color": "Black",
      "visibleColor": {
        "r": 0.25,
        "g": 0.25,
        "b": 0.25
      },
      "id": 11
    }
  },
  "DecalPallet": [],
  "LuaScript": "-- Bundled by luabundle {\"rootModuleName\":\"Global.-1.lua\",\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"Global.-1.lua\", function(require, _LOADED, __bundle_register, __bundle_modules)\n--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]\nrequire(\"vscode/console\")\n\n-- todo: handle emptying the deck and reshuffling\n-- todo: end of round do a scoring animation and start next turn\n\nglobals = {\n    deck_guid = \"f42a3c\",\n    deck = nil,\n\n    suit_buttons_guid = \"76191e\",\n    suit_buttons = nil,\n    \n    discard_zone = nil,\n\n    starting_hand_size = 10,\n\n    deck_transform = {\n        position = Vector(-1.25, 1, 0),\n        rotation = Vector(0, 180, 180),\n        rotation_snap = true\n    },\n\n    discard_transform = {\n        position = Vector(1.25, 1, 0),\n        rotation = Vector(0, 180, 0),\n        rotation_snap = true\n    },\n\n    card_suits = {\n        \"Clubs\",\n        \"Diamonds\",\n        \"Hearts\",\n        \"Spades\"\n    },\n\n    suit_icons = {\n        \"♣\",\n        \"♦\",\n        \"♥\",\n        \"♠\"\n    },\n\n    suit_colors = {\n        \"#000000\",\n        \"#ff0000\",\n        \"#ff0000\",\n        \"#000000\"\n    },\n\n    card_values = {\n        \"Ace\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \"10\",\n        \"Jack\",\n        \"Queen\",\n        \"King\"\n    },\n\n    card_scores = {\n        1,  -- Ace\n        2,  -- 2\n        3,  -- 3\n        4, -- 4\n        5, -- 5\n        6, -- 6\n        7, -- 7\n        50, -- 8\n        9, -- 9\n        10, -- 10\n        10, -- Jack\n        10, -- Queen\n        10  -- King\n    },\n\n    -- is this really necessary??\n    card_guids = {\n        -- clubs\n        \"813bbb\",\n        \"ae81e0\",\n        \"20ff3c\",\n        \"617c70\",\n        \"881f53\",\n        \"7c9338\",\n        \"42b4eb\",\n        \"fe747d\",\n        \"8d4df0\",\n        \"361cd8\",\n        \"ef31ef\",\n        \"df644d\",\n        \"cc6907\",\n\n        -- diamonds\n        \"6cae49\",\n        \"8f61c5\",\n        \"ba685d\",\n        \"c2ea94\",\n        \"122772\",\n        \"49bf7a\",\n        \"3e97d3\",\n        \"5460ac\",\n        \"fbe0b8\",\n        \"cdc92b\",\n        \"224e73\",\n        \"bd4af8\",\n        \"07176a\",\n\n        -- hearts\n        \"b5433b\",\n        \"a2e8ce\",\n        \"c1d72d\",\n        \"b85cd1\",\n        \"c6d070\",\n        \"113891\",\n        \"d700da\",\n        \"431035\",\n        \"7d7535\",\n        \"9a49f9\",\n        \"0b299b\",\n        \"fc90b1\",\n        \"48fc5d\",\n\n        -- spades\n        \"45d047\",\n        \"18a554\",\n        \"fdd8d3\",\n        \"e7c89d\",\n        \"0b6b13\",\n        \"dfe013\",\n        \"592298\",\n        \"c956d7\",\n        \"b3d1e1\",\n        \"bb6438\",\n        \"e42fba\",\n        \"e96351\",\n        \"048a8f\"\n    },\n    card_guid_map = {},\n}\n\nstate = {}\n\nfor index, guid in ipairs(globals.card_guids) do\n    local suit = math.floor((index - 1) / 13) + 1\n    local value = ((index - 1) % 13) + 1\n    globals.card_guid_map[guid] = {\n        suit = suit,\n        value = value,\n        name = globals.card_values[value] .. \" of \" .. globals.card_suits[suit],\n        guid = guid,\n        score = globals.card_scores[value]\n    }\nend\n\nfunction resetState()\n    state = {    \n        hand_size = -1,\n        players = {},\n    \n        allow_actions = false,\n        discarded_card_infos = {},\n        last_played_card_info = nil,\n    \n        current_suit = 0,\n        current_value = 0,\n        crank_value = 0,\n    \n        -- post-turn config\n        skip_turn = false,\n        keep_turn = false,\n        players_to_pickup = nil,\n        suit_choice = nil\n    }\nend\n\nresetState()\n\n--[[ The onLoad event is called after the game save finishes loading. --]]\nfunction onLoad(save_state)\n    log(save_state)\n\n    globals.deck = getObjectFromGUID(globals.deck_guid)\n    globals.suit_buttons = getObjectFromGUID(globals.suit_buttons_guid)\n\n    globals.deck.setLock(true)\n    globals.deck.interactable = false\n    \n    Global.setSnapPoints({\n        globals.deck_transform,\n        globals.discard_transform,\n    })\n\n    globals.discard_zone = spawnObject({\n        position = globals.discard_transform.position,\n        rotation = globals.discard_transform.rotation,\n        scale = Vector(2.25, 1, 3),\n        type = \"ScriptingTrigger\"\n    })\n\n    newGame()\nend\n\nfunction onSave()\n    return state\nend\n\nfunction clearPlayerUI(player_ui)\n    for _, obj in pairs(player_ui) do\n        destroyObject(obj)\n    end\nend\n\nfunction spawnPlayerText(player, x, y, value, color)\n    local hand_pos = player.getHandTransform().position\n    \n    local text_pos = hand_pos:scale(0.75)\n    local angle = text_pos:heading(\"y\")\n    \n    text_pos.y = 1.25\n\n    local axis_x = Vector(1, 0, 0):rotateOver('y', angle)\n    local axis_y = Vector(0, 0, 1):rotateOver('y', angle)\n\n    local text = spawnObject({\n        position = text_pos + axis_x:scale(x) - axis_y:scale(y),\n        rotation = Vector(90, angle, 0),\n        type = \"3DText\"\n    })\n    text.TextTool.setFontColor(color or player.color)\n    text.TextTool.setValue(value)\n\n    return text\nend\n\nfunction createPlayerText(player)\n    spawnPlayerText(player, -1.5, 0, \"Score:\", Color(1, 1, 1))\n    spawnPlayerText(player, -2.05, 1, \"Shuffles:\", Color(1, 1, 1))\n\n    return {\n        score = spawnPlayerText(player, 1, 0, \"0\"),\n        shuffles = spawnPlayerText(player, 1, 1, \"0\"),\n        turn = spawnPlayerText(player, 0, 4.5, \"My turn!\"),\n        order = spawnPlayerText(player, 0, 6, \"-->\")\n    }\nend\n\nfunction updatePlayerText(player_data, my_turn)\n    player_data.text.score.TextTool.setValue(tostring(player_data.score))\n    player_data.text.shuffles.TextTool.setValue(tostring(player_data.shuffles))\n\n    if my_turn then \n        player_data.text.order.TextTool.setValue(Turns.reverse_order and \"<--\" or \"-->\")\n    end\n\n    local turn_pos = player_data.text.turn.getPosition()\n    turn_pos.y = my_turn and 1.25 or -999\n    player_data.text.turn.setPosition(turn_pos)\n    \n    local order_pos = player_data.text.order.getPosition()\n    order_pos.y = my_turn and 1.25 or -999\n    player_data.text.order.setPosition(order_pos)\nend\n\nfunction updatePlayerTexts()\n    for _, player in ipairs(Player.getPlayers()) do\n        local player_data = state.players[player.color]\n        if player_data then\n            updatePlayerText(player_data, Turns.turn_color == player.color)\n        end\n    end\nend\n\nfunction newGame()\n    state.hand_size = globals.starting_hand_size\n\n    for _, player_data in pairs(state.players) do\n        clearPlayerUI(player_data.text)\n    end\n\n    state.players = {}\n\n    for _, player in ipairs(Player.getPlayers()) do\n        if player.seated then\n            state.players[player.color] = {\n                text = createPlayerText(player),\n                score = 0,\n                shuffles = 0\n            }\n\n            updatePlayerTexts(player)\n        end\n    end\n\n    startLuaCoroutine(Global, \"newRoundAsync\")\nend\n\nfunction wait(duration_seconds)\n    local end_time = Time.time + duration_seconds\n    repeat\n        coroutine.yield(0)\n    until Time.time >= end_time\nend\n\nfunction newRoundAsync()\n    state.allow_actions = false\n    state.discarded_card_infos = {}\n    state.last_played_card_info = nil\n\n    state.current_suit = 0\n    state.current_value = 0\n    state.crank_value = 0\n\n    state.skip_turn = false\n    state.keep_turn = false\n    state.players_to_pickup = nil\n    state.suit_choice = nil\n\n    if state.hand_size == 1 then\n        printToAll(\"Last round!\")\n    else\n        printToAll(\"A new round begins!\")\n    end\n\n    globals.suit_buttons.call(\"hideAll\")\n\n    local discard_pile = getDiscardPile()\n\n    if discard_pile != nil then\n        discard_pile.setRotationSmooth(globals.deck_transform.rotation)\n        wait(1)\n        \n        discard_pile.setPositionSmooth(globals.deck_transform.position + Vector(0, 1, 0))\n\n        if globals.deck == nil or getCardInfo(globals.deck) ~= nil then\n            globals.deck = discard_pile\n        end\n        wait(2)\n    else\n        globals.deck.setPosition(globals.deck_transform.position)\n        globals.deck.setRotation(globals.deck_transform.rotation)\n    end\n    \n    globals.deck.reset()\n\n    wait(1)\n    \n    printToAll(\"Everyone gets \" .. state.hand_size .. (state.hand_size == 1 and \" card.\" or \" cards.\"))\n\n    globals.deck.deal(state.hand_size)\n    \n    wait(1)\n\n    playFromTopOfDeck()\n    \n    Turns.enable = true\n    Turns.pass_turns = false\n    Turns.disable_interactations = true\n    Turns.type = 1\n    Turns.reverse_order = false\n    \n    wait(0.5)\n\n    if canPlayAnyCards(Player[Turns.turn_color]) then\n        state.allow_actions = true\n    else\n        forcePickupAsync(Player[Turns.turn_color])\n    end\n\n    return 1\nend\n\nfunction getCardInfo(card)\n    if card == nil or card.isDestroyed() then return nil end\n\n    local guid = card.getGUID()\n    return globals.card_guid_map[guid]\nend\n\nfunction onPlayerTurn(player)\n    updatePlayerTexts()\n    updateSuitUIRotation(player)\nend\n\nfunction canPlayAnyCards(player)\n    local hand_objects = player.getHandObjects()\n\n    for _, obj in ipairs(hand_objects) do\n        local card_info = getCardInfo(obj)\n        if card_info ~= nil then\n            if canPlayCard(card_info) then\n                return true\n            end\n        end\n    end\n    \n    return false\nend\n\nfunction forcePickupAsync(player)\n    state.players_to_pickup = {[player.color] = math.max(1, state.crank_value)}\n    state.allow_actions = false\n    state.crank_value = 0\n\n    printToAll(player.steam_name .. \" can't play any cards!\")\n\n    return endTurnAsync()\nend\n\nfunction onObjectSpawn(spawn_object)\n    local card_info = getCardInfo(spawn_object)\n    if card_info == nil then return end\n\n    spawn_object.setName(card_info.name)\nend\n\nfunction onObjectEnterContainer(container, enter_object)\n    local card_info = getCardInfo(enter_object)\n    if card_info == nil then return end\n\n    container.interactable = false\nend\n\nfunction onObjectDrop(player_color, dropped_object)\n    local card_info = getCardInfo(dropped_object)\n    if card_info == nil then return end\n\n    if not state.allow_actions or player_color != Turns.turn_color or not canPlayCard(card_info) then\n        dropped_object.deal(1, player_color)\n        return\n    end\n\n    local obj_position = dropped_object.getPosition()\n    local discard_dist = (obj_position - globals.discard_transform.position):magnitude()\n    local hand_dist = (obj_position - Player[player_color].getHandTransform().position):magnitude()\n\n    if hand_dist < discard_dist then\n        dropped_object.deal(1, player_color)\n        return\n    end\n    \n    dropped_object.setPositionSmooth(globals.discard_transform.position + Vector(0, 0.5, 0))\n    dropped_object.setRotationSmooth(globals.discard_transform.rotation)\n    onCardPlayed(player_color, dropped_object, card_info)\nend\n\nfunction canPlayCard(card_info)\n    if state.crank_value > 0 then\n        return card_info.value == 1 or card_info.value == 2\n    end\n\n    return card_info.value == 8\n        or card_info.value == 9\n        or card_info.value == state.current_value\n        or card_info.suit == state.current_suit\nend\n\nfunction getOppositePlayerColor(player_color)\n    for index, color in ipairs(Turns.order) do\n        if index == player_color then\n            local opposite_index = math.ceil(index + #Turns.order / 2) % #Turns.order\n            return Turns.order[opposite_index]\n        end\n    end\n\n    return nil\nend\n\nfunction onCardPlayed(player_color, card, card_info)\n    local previous_card_info = state.last_played_card_info\n\n    card.interactable = false\n\n    state.allow_actions = false\n    state.last_played_card_info = card_info\n    state.current_value = card_info.value\n    state.current_suit = card_info.suit\n    table.insert(state.discarded_card_infos, card_info)\n    \n    globals.suit_buttons.call(\"hideSuitText\")\n\n    if card_info.value == 10 then\n        Turns.reverse_order = not Turns.reverse_order\n    end\n\n    if player_color == nil then return end\n\n    if card_info.value == 1 then\n        if state.crank_value > 0 then\n            state.crank_value = state.crank_value + 1\n        end\n    elseif card_info.value == 2 then\n        if state.crank_value == 0 then\n            printToAll(\"Crank it up!\")\n        end\n\n        state.crank_value = state.crank_value + 2\n    elseif card_info.value == 4 then\n        state.skip_turn = true\n    elseif card_info.value == 5 then\n        state.players_to_pickup = {}\n\n        for color, player_data in pairs(state.players) do\n            if player_color ~= color then\n               state.players_to_pickup[color] = 1\n            end\n        end\n    elseif card_info.value == 6 then\n        state.keep_turn = true\n    elseif card_info.value == 7 then\n        local opposite_color = getOppositePlayerColor(player_color)\n        if opposite_color ~= nil then\n            state.players_to_pickup = {[opposite_color] = 1}\n        end\n    elseif card_info.value == 8 then\n        state.suit_choice = {\n            [1] = true,\n            [2] = true,\n            [3] = true,\n            [4] = true\n        }\n    elseif card_info.value == 9 then\n        if previous_card_info.suit == 1 or previous_card_info.suit == 4 then\n            state.suit_choice = {\n                [1] = true,\n                [2] = false,\n                [3] = false,\n                [4] = true\n            }\n        else\n            state.suit_choice = {\n                [1] = false,\n                [2] = true,\n                [3] = true,\n                [4] = false\n            }\n        end\n    end\n\n    if state.crank_value > 0 then\n        globals.suit_buttons.call(\"showCrankText\", { value = state.crank_value })\n    end\n\n    startLuaCoroutine(Global, \"endTurnAsync\")\nend\n\n-- Get a table containing player colors in turn order,\n-- starting with the current player.\nfunction getTurnOrder()\n    local turn_order = Player.getColors()\n\n    -- Filter out players that aren't taking part\n    for i = #turn_order, 1, -1 do\n        if state.players[turn_order[i]] == nil then\n            table.remove(turn_order, i)\n        end\n    end\n\n    -- Reverse if necessary\n    if Turns.reverse_order then\n        for i = 1, math.floor(#turn_order / 2) do\n            local temp = turn_order[i]\n            turn_order[i] = turn_order[#turn_order - i + 1]\n            turn_order[#turn_order - i + 1] = temp\n        end\n    end\n\n    -- Rotate until the current player is first\n    local iters = #turn_order\n    while turn_order[1] ~= Turns.turn_color and iters > 0 do\n        local first = turn_order[1]\n        table.remove(turn_order, 1)\n        table.insert(turn_order, first)\n\n        iters = iters - 1\n    end\n\n    return turn_order\nend\n\nfunction playerPickupAsync()\n    local turn_order = getTurnOrder()\n\n    for _, player_color in ipairs(turn_order) do\n        local card_count = state.players_to_pickup[player_color]\n\n        if card_count ~= nil then\n            printToAll(player_color .. \" picks up \" .. tostring(card_count))\n\n            if not drawForPlayerAsync(player_color, card_count) then\n                return false\n            end\n\n            wait(0.5)\n        end\n    end\n\n    return true\nend\n\nfunction getDiscardPile()\n    for _, obj in ipairs(globals.discard_zone.getObjects()) do\n        if obj.getQuantity() > 0 then\n            return obj\n        end\n\n        if getCardInfo(obj) ~= nil then\n            return obj\n        end\n    end\n\n    return nil\nend\n\nfunction getDeckQuantity()\n    if globals.deck == nil then\n        return 0\n    end\n\n    if getCardInfo(globals.deck) ~= nil then\n        return 1\n    end\n\n    return globals.deck.getQuantity()\nend\n\nfunction playFromTopOfDeck()\n    local card = globals.deck.takeObject(globals.discard_transform)\n    local card_info = getCardInfo(card)\n\n    onCardPlayed(nil, card, card_info)\nend\n\nfunction drawFromDeck(player_color, count)\n    if getCardInfo(globals.deck) ~= nil then\n        -- This was the last card\n        globals.deck.deal(count, player_color)\n        globals.deck = nil\n        return\n    end\n\n    local deck_cards = globals.deck.getObjects()\n\n    globals.deck.deal(count, player_color)\n    \n    if count == #deck_cards then\n        -- Deck is empty!\n        globals.deck = nil\n    elseif count == #deck_cards - 1 then\n        -- One card left\n        globals.deck = getObjectFromGUID(deck_cards[#deck_cards].guid)\n        globals.deck.interactable = false\n    end\nend\n\nfunction reshuffleDiscardPileAsync()\n    state.discarded_card_infos = {}\n\n    globals.deck = getDiscardPile()\n\n    globals.deck.setRotationSmooth(globals.deck_transform.rotation)\n    wait(0.5)\n\n    if globals.deck.getQuantity() > 1 then\n        globals.deck.shuffle()\n        wait(0.5)\n    end\n\n    globals.deck.setPositionSmooth(globals.deck_transform.position)\nend\n\nfunction drawForPlayerAsync(player_color, count)\n    local deck_count = getDeckQuantity()\n\n    if deck_count >= count then\n        drawFromDeck(player_color, count)\n        return true\n    end\n    \n    if getDiscardPile() == nil then\n        return false\n    end\n\n    if deck_count > 0 then\n        count = count - deck_count\n        drawFromDeck(player_color, deck_count)\n    end\n\n    wait(1.0)\n\n    printToAll(player_color .. \" causes a reshuffle!\")\n\n    local player_data = state.players[player_color]\n    player_data.shuffles = player_data.shuffles + 1\n    player_data.score = player_data.score + player_data.shuffles * 5\n\n    updatePlayerTexts()\n\n    reshuffleDiscardPileAsync()\n    wait(0.5)\n    playFromTopOfDeck()\n    \n    wait(1.0)\n\n    return drawForPlayerAsync(player_color, count)\nend\n\nfunction chooseSuitAsync()\n    globals.suit_buttons.call(\"hideSuitText\")\n\n    globals.suit_buttons.call(\"setEnabledSuits\", state.suit_choice)\n\n    while state.suit_choice ~= nil do\n        coroutine.yield(0)\n    end\n    \n    globals.suit_buttons.call(\"hideSuitButtons\")\n\n    printToAll(\"The current suit is now \" .. globals.card_suits[state.current_suit] .. \"!\")\n\n    updateSuitText()\nend\n\nfunction onSuitButtonClick(params)\n    local player = params.player\n    local suit = params.suit\n\n    if state.suit_choice == nil then return end\n    if Turns.turn_color ~= player.color then return end\n    if state.suit_choice[suit] == nil then return end\n\n    state.suit_choice = nil\n    state.current_suit = suit\nend\n\nfunction updateSuitUIRotation(player)\n    if player == nil then return end\n\n    local hand_transform = player.getHandTransform()\n    if hand_transform == nil then return end\n\n    globals.suit_buttons.setRotation(Vector(0, hand_transform.position:heading(\"y\") + 180, 0))\nend\n\nfunction updateSuitText()\n    globals.suit_buttons.call(\"showSuitText\", { value = globals.suit_icons[state.current_suit], color = globals.suit_colors[state.current_suit] })\nend\n\nfunction advanceTurns(count)\n    local turn_order = getTurnOrder()\n    local index = (count % #turn_order) + 1\n\n    Turns.turn_color = turn_order[index]\nend\n\nfunction shouldEndRound()\n    local any_player_has_cards = false\n    local all_players_have_cards = true\n\n    for player_color, _ in pairs(state.players) do\n        local player = Player[player_color]\n        local has_cards = false\n\n        for _, hand_obj in ipairs(player.getHandObjects()) do\n            local card_info = getCardInfo(hand_obj)\n            if card_info ~= nil then\n                has_cards = true\n                break\n            end\n        end\n\n        if has_cards then\n            any_player_has_cards = true\n        else\n            all_players_have_cards = false\n        end\n    end\n\n    return not (all_players_have_cards or state.crank_value > 0 and any_player_has_cards) or true\nend\n\nfunction endTurnAsync()\n    wait(0.5)\n\n    if state.players_to_pickup ~= nil then\n        if not playerPickupAsync() then\n            return endRoundAsync()\n        end\n        wait(0.5)\n        \n        globals.suit_buttons.call(\"hideCrankText\")\n    end\n\n    if not state.keep_turn and shouldEndRound() then\n        return endRoundAsync()\n    end\n    \n    if state.suit_choice ~= nil then\n        chooseSuitAsync()\n        wait(0.5)\n    end\n\n    if not state.keep_turn then\n        if state.skip_turn then\n            advanceTurns(2)\n        else\n            advanceTurns(1)\n        end\n    end\n\n    state.keep_turn = false\n    state.skip_turn = false\n    state.players_to_pickup = nil\n    state.suit_choice = nil\n    \n    if canPlayAnyCards(Player[Turns.turn_color]) then\n        state.allow_actions = true\n        return 1\n    else\n        return forcePickupAsync(Player[Turns.turn_color])\n    end\nend\n\nfunction endRoundAsync()\n    printToAll(\"The round has ended!\")\n    \n    wait(2)\n\n    -- Score for each player\n    local turn_order = getTurnOrder()\n    for _, player_color in ipairs(turn_order) do\n        scorePlayerAsync(player_color)\n        wait(2)\n    end\n\n    if state.hand_size == 1 then\n        return endGameAsync()\n    end\n    \n    state.hand_size = state.hand_size - 1\n\n    return newRoundAsync()\nend\n\nfunction compareCards(a, b)\n    return a.score < b.score\nend\n\nfunction scorePlayerAsync(player_color)\n    local cards = {}\n    local threes = {}\n\n    local high_card_count = 0\n\n    for _, obj in ipairs(Player[player_color].getHandObjects()) do\n        local card_info = getCardInfo(obj)\n        if card_info ~= nil then\n            if card_info.score > 3 then\n                high_card_count = high_card_count + 1\n            end\n            \n            if card_info.value == 3 then\n                table.insert(threes, card_info)\n            else\n                table.insert(cards, card_info)\n            end\n        end\n    end\n\n    local total_cards = #cards + #threes\n\n    if total_cards == 0 then\n        printToAll(player_color .. \" has an empty hand!\")\n        return 1\n    end\n\n    if total_cards == 1 then\n        printToAll(player_color .. \" has 1 card!\")\n    else\n        printToAll(player_color .. \" has \" .. total_cards .. \" cards!\")\n    end\n\n    if #threes > high_card_count then\n        local spare_threes = #threes - high_card_count\n        for i = 1, spare_threes do\n            table.insert(cards, table.remove(threes))\n        end\n    end\n\n    table.sort(cards, compareCards)\n\n    local player_data = state.players[player_color]\n    local total_score = 0\n\n    while #cards > 0 do\n        local next_card = table.remove(cards)\n        local card_obj = getObjectFromGUID(next_card.guid)\n        \n        local discard_pile = getDiscardPile()\n        discard_pile.putObject(card_obj)\n\n        local card_score = 0\n\n        if #threes > 0 then\n            wait(0.5)\n            local three = table.remove(threes)\n            discard_pile.putObject(getObjectFromGUID(three.guid))\n\n            card_score = 3\n            printToAll(\"  +\" .. card_score .. \" (was \" .. next_card.score .. \")\")\n        else\n            card_score = next_card.score\n            printToAll(\"  +\" .. card_score)\n        end\n\n        player_data.score = player_data.score + card_score\n        total_score = total_score + card_score\n        updatePlayerTexts()\n\n        wait(1)\n    end\n\n    printToAll(\"Total this round: \" .. total_score)\n\n    return 1\nend\n\nfunction endGameAsync()\n    local best_color = nil\n    local best_data = nil\n\n    for player_color, player_data in pairs(state.players) do\n        if best_data == nil\n            or player_data.score < best_data.score\n            or player_data.score == best_data.score and player_data.shuffles < best_data.shuffles\n            then\n\n                best_color = player_color\n            best_data = player_data\n        end\n    end\n\n    if best_color ~= nil then\n        printToAll(best_color .. \" wins with \" .. best_data.score .. \" points!\")\n    end\n\n    Turns.enable = false\n\n    return 1\nend\n\nend)\n__bundle_register(\"vscode/console\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"Console/console++\")\r\n\r\n-- function prototype\r\nfunction onExternalCommand(command) end\r\n\r\n-- Overwrite onChat function if you rather be handled by onExternalMessage\r\n-- function onChat(message, player) end\r\n\r\nfunction onExternalMessage(data)\r\n  if data.input ~= nil then onExternalCommand(data.input) end\r\n  if data.command ~= nil then\r\n    local hostPlayer\r\n    local players = getSeatedPlayers()\r\n    for key, value in pairs(players) do\r\n      if Player[value].host then\r\n        hostPlayer = Player[value]\r\n      end\r\n    end\r\n    if data.command ~= '' then\r\n      local command = ''\r\n      local command_function = nil\r\n      local parameters = {hostPlayer}\r\n      local requires_admin = false\r\n      local command_mode = console.in_command_mode[hostPlayer.steam_id]\r\n      if command_mode and console.active then\r\n          command, command_function, parameters, requires_admin = console.get_command(data.command, hostPlayer)\r\n      elseif data.command:sub(1, 1) == console.command_char and console.active then\r\n          if data.command:len() > 1 then\r\n              command, command_function, parameters, requires_admin = console.get_command(data.command:sub(2), hostPlayer)\r\n          else\r\n              command, command_function, parameters, requires_admin = console.get_command(console.command_char, hostPlayer)\r\n          end\r\n      else\r\n          for i, f in ipairs(console.validation_functions) do\r\n              local valid, response = f(data.command)\r\n              if response == nil then response = '' end\r\n              if not valid then\r\n                  printToColor(response, hostPlayer.color, console.invalid_color)\r\n                  return false\r\n              end\r\n          end\r\n          return true\r\n      end\r\n      if console.active then\r\n          if command_function and (hostPlayer.admin or not requires_admin) then\r\n              if command_mode then\r\n                  data.command = console.command_char .. console.command_char .. data.command\r\n              end\r\n              local response, mute = command_function(unpack(parameters))\r\n              if response ~= nil or mute ~= nil then\r\n                  if not mute then\r\n                      printToColor('\\n'..data.command, hostPlayer.color, console.command_color)\r\n                  end\r\n                  if response then\r\n                      printToColor(response, hostPlayer.color, console.output_color)\r\n                  end\r\n              end\r\n              if console.in_command_mode[hostPlayer.steam_id] then console.display_prompt(hostPlayer) end\r\n              return false\r\n          else\r\n              printToColor('\\n'..data.command, hostPlayer.color, console.command_color)\r\n              printToColor(console.error_bb .. \"<command '\" .. command .. \"' not found>[-]\", hostPlayer.color, console.output_color)\r\n              return false\r\n          end\r\n      end\r\n    end\r\n  end\r\nend\r\n\nend)\n__bundle_register(\"Console/console++\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"Console/console\")\r\n\r\nif not console.plusplus then\r\n    console.plusplus = true\r\n\r\n    -- Change these values as you wish\r\n    console.seperator         = '/'\r\n    console.wildcard          = '*'\r\n    console.literal           = '`'  -- string parameters will be treated as paths where apt unless prefixed with this\r\n    console.result            = '~'  -- refers to the most recently returned result from a call\r\n    console.command_seperator = ';'  -- used in batch files to seperate commands\r\n    console.indent            = '  '\r\n    console.crop_string_at = 20\r\n    console.builtin_path = 'sys'\r\n    console.table_bb    = '[EEDD88]'\r\n    console.hidden_bb   = '[DDAAAA]'\r\n    console.function_bb = '[AADDAA]'\r\n    console.value_bb    = '[88EE88]'\r\n    console.boolean_bb  = '[CCCCFF]'\r\n    console.object_bb   = '[CCBBCC]'\r\n    console.guid_bb     = '[BBBBBB]'\r\n\r\n    console.autoexec         = ''\r\n    console.autoexec_options = '-s'\r\n\r\n    -- Exposed methods:\r\n\r\n    function console.hide_globals(label)\r\n        -- all globals present when you call this will be hidden under <label> (unless built-in or already hidden)\r\n        local hidden = {}\r\n        for global, _ in pairs(_G) do\r\n            local found = false\r\n            for _, globals in pairs(console.hidden_globals) do\r\n                if globals[global] then\r\n                    found = true\r\n                    break\r\n                end\r\n            end\r\n            if not found then\r\n                table.insert(hidden, global)\r\n            end\r\n        end\r\n        if console.hidden_globals[label] == nil then\r\n            console.hidden_globals[label] = {}\r\n        end\r\n        for _, global in ipairs(hidden) do\r\n            console.hidden_globals[label][global] = true\r\n        end\r\n    end\r\n\r\n    function console.load()\r\n        -- call this function in an onLoad event to enable the autoexec\r\n        console.cd = console.seperator\r\n        for _, player in pairs(getSeatedPlayers()) do\r\n            if Player[player].admin then\r\n                console.commands['exec'].command_function(Player[player], console.seperator..'console'..console.seperator..'autoexec', console.autoexec_options)\r\n                break\r\n            end\r\n        end\r\n    end\r\n\r\n    function console.update()\r\n        -- call this function in an onUpdate event to enable the watch list\r\n        if console.watch_list and not console.watch_list_paused then\r\n            for variable, watch in pairs(console.watch_list) do\r\n                if watch.throttle == 0 or watch.last_check + watch.throttle < os.clock() then\r\n                    watch.last_check = os.clock()\r\n                    local node, id, parent, found\r\n                    if watch.is_guid then\r\n                        node = getObjectFromGUID(variable)\r\n                        found = tostring(node) ~= 'null'\r\n                    else\r\n                        node, id, parent, found = console.node_from_path(variable)\r\n                    end\r\n                    if node ~= nil and found then\r\n                        if type(node) == 'userdata' then\r\n                            if tostring(node) ~= 'null' then\r\n                                local p = function (x) return math.floor(x * 100) * 0.01 end\r\n                                local r = function (x) return math.floor(x + 0.5) end\r\n                                local position = node.getPosition()\r\n                                local rotation = node.getRotation()\r\n                                if p(position.x) ~= p(watch.position.x) or r(rotation.x) ~= r(watch.rotation.x) or\r\n                                   p(position.y) ~= p(watch.position.y) or r(rotation.y) ~= r(watch.rotation.y) or\r\n                                   p(position.z) ~= p(watch.position.z) or r(rotation.z) ~= r(watch.rotation.z) then\r\n                                   watch.position = position\r\n                                   watch.rotation = rotation\r\n                                   node = ' ∡ '..r(rotation.x)..' '..r(rotation.y)..' '..r(rotation.z) ..\r\n                                        console.boolean_bb..'   ⊞  '..p(position.x)..'   '..p(position.y)..'   '..p(position.z)\r\n                                   if watch.is_guid then\r\n                                       variable = console.format_guid(variable)\r\n                                   else\r\n                                       variable = console.object_bb .. variable .. '[-]'\r\n                                   end\r\n                                   printToColor(variable .. console.value_bb .. node .. '[-]', watch.player, console.output_color)\r\n                                end\r\n                            end\r\n                        elseif type(node) == 'function' then\r\n                            local result = node(unpack(watch.parameters))\r\n                            if watch.property and (type(result) == 'table' or type(result) == 'userdata') then\r\n                                result = result[watch.property]\r\n                                if type(result) == 'function' then\r\n                                    result = result()\r\n                                end\r\n                            end\r\n                            if result ~= watch.value then\r\n                                watch.value = result\r\n                                result = tostring(result)\r\n                                if result:len() > console.crop_string_at then result = result:sub(1, console.crop_string_at) .. '...' end\r\n                                if result:len() == 6 and watch.label:lower():find('guid') then result = console.format_guid(result) end\r\n                                printToColor(watch.label .. console.value_bb .. result .. '[-]', watch.player, console.output_color)\r\n                            end\r\n                        else\r\n                            if node ~= watch.value then\r\n                                watch.value = node\r\n                                if type(node) == 'boolean' then\r\n                                    if node then\r\n                                        node = 'true'\r\n                                    else\r\n                                        node = 'false'\r\n                                    end\r\n                                elseif type(node) == 'string' then\r\n                                    if node:len() > console.crop_string_at then node = node:sub(1, console.crop_string_at):gsub('\\n', ' ') .. '...' end\r\n                                end\r\n                                printToColor(variable .. ': ' .. console.value_bb .. node .. '[-]', watch.player, console.output_color)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    -- simple swear-blocking validation\r\n    console.add_validation_function(\r\n        function (message)\r\n            local message = message:lower()\r\n            for i, bad_word in pairs({'fuck', 'cunt'}) do\r\n                if message:find(bad_word) then\r\n                    return false, \"No swearing!\"\r\n                end\r\n            end\r\n            return true\r\n        end\r\n    )\r\n\r\n    -- End of exposed methods.  You shouldn't need to interact with anything below (under normal circumstances)\r\n\r\n\r\n    -- override default prompt with one which displays current table\r\n    function console.display_prompt(player)\r\n        printToColor(console.cd .. ' ' .. console.command_char..console.command_char, player.color, console.prompt_color)\r\n    end\r\n\r\n\r\n    -- console++ follows\r\n\r\n    console.cd = console.seperator\r\n    console.hidden_globals = {}\r\n    console.hide_globals(console.builtin_path)\r\n\r\n    function console.is_hidden(label)\r\n        for _, globals in pairs(console.hidden_globals) do\r\n            if globals[label] then\r\n                return true\r\n            end\r\n        end\r\n        return false\r\n    end\r\n\r\n    function console.escape_bb(s)\r\n        local s = tostring(s)\r\n        if s == '' then\r\n            return ''\r\n        else\r\n            local r = ''\r\n            for c = 1, s:len() do\r\n                local char = s:sub(c, c)\r\n                if char == '[' then\r\n                    r = r .. '[\\u{200B}'\r\n                elseif char == ']' then\r\n                    r = r .. '\\u{200B}]'\r\n                else\r\n                    r = r .. char\r\n                end\r\n            end\r\n            return r\r\n        end\r\n    end\r\n\r\n    function console.format_guid(guid)\r\n        return console.guid_bb .. '⁅' .. guid .. '⁆[-]'\r\n    end\r\n\r\n    function console.fill_path(path)\r\n        local path = path\r\n        local filter = nil\r\n        if path == nil then\r\n            return console.cd, filter\r\n        end\r\n        local c = path:len()\r\n        if path:sub(c) ~= console.seperator then\r\n            local found = false\r\n            while c > 0 do\r\n                local char = path:sub(c, c)\r\n                if char == console.wildcard then\r\n                    found = true\r\n                elseif char == console.seperator then\r\n                    break\r\n                end\r\n                c = c - 1\r\n            end\r\n            if found then\r\n                filter = '^'\r\n                for i = c + 1, path:len() do\r\n                    local char = path:sub(i, i)\r\n                    if char == console.wildcard then\r\n                        filter = filter .. '.*'\r\n                    else\r\n                        filter = filter .. char\r\n                    end\r\n                end\r\n                filter = filter .. '$'\r\n                path = path:sub(1, c)\r\n            end\r\n        end\r\n        if path:sub(1,1) == console.seperator then\r\n            return path, filter\r\n        else\r\n            return console.cd .. path, filter\r\n        end\r\n    end\r\n\r\n    function console.node_from_path(path)\r\n        local node = _G\r\n        local id = {''}\r\n        local parent = {nil}\r\n        local found = true\r\n        local depth = 0\r\n        local stack = {}\r\n        local hidden = nil\r\n        local ends_with_table = {true}\r\n        if path == 'true' then\r\n            node = true\r\n        elseif path == 'false' then\r\n            node = false\r\n        elseif path ~= console.seperator then\r\n            for i, part in ipairs(console.split(path, console.seperator)) do\r\n                if part == '..' then\r\n                    if depth > 0 then\r\n                        node = table.remove(parent)\r\n                        table.remove(id)\r\n                        table.remove(stack)\r\n                        table.remove(ends_with_table)\r\n                        depth = depth - 1\r\n                    end\r\n                elseif part == '.' then\r\n                    ; -- do nothing, . = where we are\r\n                elseif part == console.result then\r\n                    table.insert(parent, node)\r\n                    table.insert(id, part)\r\n                    table.insert(stack, part)\r\n                    node = console.returned_value\r\n                    table.insert(ends_with_table, type(node) == 'table')\r\n                    depth = depth + 1\r\n                elseif node[part] ~= nil then\r\n                    table.insert(parent, node)\r\n                    table.insert(id, part)\r\n                    table.insert(stack, part)\r\n                    node = node[part]\r\n                    table.insert(ends_with_table, type(node) == 'table')\r\n                    depth = depth + 1\r\n                elseif node == _G and console.hidden_globals[part] then\r\n                    hidden = console.hidden_globals[part]\r\n                else\r\n                    table.insert(id, part)\r\n                    found = false\r\n                    break\r\n                end\r\n            end\r\n        end\r\n        path = ''\r\n        for i, part in ipairs(stack) do\r\n            path = path .. console.seperator .. part\r\n        end\r\n        if table.remove(ends_with_table) then\r\n            path = path .. console.seperator\r\n        end\r\n        return node, table.remove(id), table.remove(parent), found, path, hidden\r\n    end\r\n\r\n\r\n    -- commands\r\n\r\n    console.add_admin_command('cd', '[<table>]',\r\n        'Display current table or change current table',\r\n        function (player, path)\r\n            if path == nil then\r\n                return console.cd\r\n            else\r\n                path = tostring(path)\r\n            end\r\n            local location = console.fill_path(path)\r\n            local node, id, parent, found, location = console.node_from_path(location)\r\n            local text = nil\r\n            if node ~= nil and found and type(node) == 'table' then\r\n                console.cd = location\r\n                if not console.in_command_mode[player.steam_id] then text = console.cd end\r\n            else\r\n                text = console.error_bb .. '<not found>[-]'\r\n            end\r\n            return text, false\r\n        end\r\n    )\r\n    console.add_admin_command('cd..', '', 'Change current table to parent table.', 'cd', {'..'})\r\n\r\n    console.add_admin_command('ls', '[' .. console.option .. '?afotv] [' .. console.option .. 'r[#]] [<table>]',\r\n        'Display variables in current table or specified table',\r\n        function (player, ...)\r\n            local help_details = console.header_bb .. 'Options[-]\\n' ..\r\n                'Show:\\n '..console.option..'f functions\\n '..console.option..'o objects\\n '..\r\n                console.option..'v variables (defaults to on)\\n '..console.option..'t tables (defaults to on)\\n '..\r\n                console.option..'a all\\n\\n' ..console.option..'r[#] recurse [# layers if specified]'\r\n            local path = console.cd\r\n            local display_functions = false\r\n            local display_objects = false\r\n            local display_variables = false\r\n            local display_tables = false\r\n            local display_all = false\r\n            local recursions_left = 0\r\n            for i, arg in ipairs({...}) do\r\n                arg = tostring(arg)\r\n                if arg:len() > 1 and arg:sub(1,1) == console.option then\r\n                    local c = 2\r\n                    while c <= arg:len() do\r\n                        local option = arg:sub(c,c)\r\n                        if option == 'f' then\r\n                            display_functions = not display_functions\r\n                        elseif option == 'o' then\r\n                            display_objects = not display_objects\r\n                        elseif option == 'v' then\r\n                            display_variables = not display_variables\r\n                        elseif option == 't' then\r\n                            display_tables = not display_tables\r\n                        elseif option == 'a' then\r\n                            display_all = not display_all\r\n                        elseif option == 'r' then\r\n                            local n = ''\r\n                            local j = c + 1\r\n                            while j <= arg:len() do\r\n                                local char = arg:sub(j, j)\r\n                                if char:match('%d') then\r\n                                    n = n .. char\r\n                                else\r\n                                    break\r\n                                end\r\n                                j = j + 1\r\n                            end\r\n                            c = j - 1\r\n                            if n == '' then\r\n                                recursions_left = 20\r\n                            else\r\n                                recursions_left = tonumber(n)\r\n                            end\r\n                        elseif option == '?' or option == 'h' then\r\n                            return help_details\r\n                        else\r\n                            return console.error_bb .. \"<option '\" .. console.option .. option .. \"' not recognized>[-]\\n\"\r\n                        end\r\n                        c = c + 1\r\n                    end\r\n                else\r\n                    path = arg\r\n                end\r\n            end\r\n            local default_variables = not (display_tables or display_objects or display_functions or display_variables)\r\n            if display_functions or display_objects or display_variables then\r\n                display_tables = not display_tables\r\n            end\r\n            if display_all then\r\n                display_functions = true\r\n                display_objects = true\r\n                display_variables = true\r\n                display_tables = true\r\n            elseif default_variables then\r\n                display_functions = false\r\n                display_objects = false\r\n                display_variables = true\r\n                display_tables = true\r\n            end\r\n            local location, filter = console.fill_path(path)\r\n            return console.ls(player, location, filter, display_functions, display_objects, display_variables, display_tables, recursions_left)\r\n        end\r\n    )\r\n    console.add_admin_command('dir', nil, nil, 'ls')\r\n    console.add_admin_command(console.result, '', \"Calls 'ls \"..console.option..\"a \"..console.result..\"'\", 'ls', {console.option..'a', console.result})\r\n\r\n    function console.ls(player, path, filter, display_functions, display_objects, display_variables, display_tables, recursions_left, indent)\r\n        local text = ''\r\n        local indent = indent or ''\r\n        local node, id, parent, found, location, hidden = console.node_from_path(path)\r\n        local paths = {}\r\n        if node ~= nil and (found or hidden) then\r\n            if type(node) == 'table' then\r\n                local tables = {}\r\n                local entries = {}\r\n                for k, v in pairs(node) do\r\n                    if (node ~= _G or (not hidden and not console.is_hidden(k)) or (hidden and hidden[k])) and (filter == nil or k:match(filter)) then\r\n                        if type(v) == 'table' then\r\n                            local t = console.table_bb .. k .. '[-]'\r\n                            table.insert(tables, t)\r\n                            paths[t] = path .. console.seperator .. k\r\n                        else\r\n                            if type(v) == 'function' then\r\n                                if display_functions then\r\n                                    table.insert(entries, console.function_bb .. k .. '[-]()')\r\n                                end\r\n                            elseif type(v) == 'userdata' then\r\n                                if display_objects then\r\n                                    local tag = tostring(v)\r\n                                    if tag:find('(LuaGameObjectScript)') and not tag:gsub('(LuaGameObjectScript)',''):find('Script ') then\r\n                                        tag = v.tag .. ' ' .. console.format_guid(v.getGUID())\r\n                                    end\r\n                                    if type(k) == 'number' and math.floor(k) == k then k = string.format('%04d', k) end\r\n                                    table.insert(entries, console.object_bb .. k .. '[-]: '  .. tag)\r\n                                end\r\n                            elseif display_variables then\r\n                                if type(v) == 'boolean' then\r\n                                    if v then\r\n                                        v = 'true'\r\n                                    else\r\n                                        v = 'false'\r\n                                    end\r\n                                    table.insert(entries, k .. ': ' .. console.boolean_bb .. v .. '[-]')\r\n                                else\r\n                                    local is_guid = false\r\n                                    if type(v) == 'string' then\r\n                                        if v:len()> console.crop_string_at then v = v:sub(1, console.crop_string_at):gsub('\\n', ' ') .. '...' end\r\n                                        if type(k) == 'string' and k:lower():find('guid') and v:len() == 6 then\r\n                                            is_guid = true\r\n                                        end\r\n                                    end\r\n                                    if is_guid then\r\n                                        table.insert(entries, k .. ': ' .. console.format_guid(v) .. '[-]')\r\n                                    else\r\n                                        table.insert(entries, k .. ': ' .. console.value_bb .. console.escape_bb(v) .. '[-]')\r\n                                    end\r\n                                end\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n                local cmp = function (a, b)\r\n                    if not a then\r\n                        return true\r\n                    elseif not b then\r\n                        return false\r\n                    else\r\n                        local la = a:len()\r\n                        local lb = b:len()\r\n                        local c = 1\r\n                        repeat\r\n                            if c > la and c <= lb then\r\n                                return true\r\n                            elseif c > lb and c <= la then\r\n                                return false\r\n                            elseif c > la then\r\n                                return false\r\n                            else\r\n                                local ba = a:sub(c, c):byte()\r\n                                local bb = b:sub(c, c):byte()\r\n                                if ba < bb then\r\n                                    return true\r\n                                elseif bb < ba then\r\n                                    return false\r\n                                end\r\n                            end\r\n                            c = c + 1\r\n                        until false\r\n                    end\r\n                end\r\n                table.sort(tables, cmp)\r\n                table.sort(entries, cmp)\r\n                local cr = ''\r\n                if display_tables then\r\n                    for i, t in ipairs(tables) do\r\n                        text = text .. cr .. indent .. t .. console.seperator\r\n                        if recursions_left ~= 0 then\r\n                            text = text .. '\\n' .. console.ls(player, paths[t], filter,\r\n                                display_functions, display_objects, display_variables, display_tables,\r\n                                recursions_left-1, indent..console.indent)\r\n                        end\r\n                        cr = '\\n'\r\n                    end\r\n                    if node == _G and not hidden then\r\n                        for label, _ in pairs(console.hidden_globals) do\r\n                            if (filter == nil or label:match(filter)) then -- and label ~= console.builtin_path\r\n                                text = text .. cr .. indent .. console.hidden_bb .. label .. console.seperator .. '[-]'\r\n                                cr = '\\n'\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n                for _, entry in ipairs(entries) do\r\n                    text = text .. cr .. indent .. entry\r\n                    cr = '\\n'\r\n                end\r\n            elseif type(node) == 'userdata' then\r\n                local tag = tostring(node)\r\n                if tag ~= 'null' and tag:find('(LuaGameObjectScript)') and not tag:gsub('(LuaGameObjectScript)',''):find('Script ') then\r\n                    tag = node.tag .. ' ' .. console.format_guid(node.getGUID())\r\n                end\r\n                text = indent .. console.object_bb .. id .. '[-]: ' .. tag\r\n            elseif type(node) == 'function' then\r\n                text = indent .. console.function_bb .. id .. '[-]()'\r\n            elseif type(node) == 'boolean' then\r\n                if node then\r\n                    text = indent .. id .. ': ' .. console.boolean_bb .. 'true[-]'\r\n                else\r\n                    text = indent .. id .. ': ' .. console.boolean_bb .. 'false[-]'\r\n                end\r\n            else\r\n                if type(id) == 'string' and id:lower():find('guid') and type(node) == 'string' and node:len() == 6 then\r\n                    text = indent .. id .. ': ' .. console.format_guid(node) .. '[-]'\r\n                else\r\n                    text = indent .. id .. ': ' .. console.value_bb .. console.escape_bb(node) .. '[-]'\r\n                end\r\n            end\r\n        else\r\n            text = indent .. console.error_bb .. '<not found>[-]'\r\n        end\r\n        return text\r\n    end\r\n\r\n    console.add_admin_command('call', '<function> [<parameter>...]',\r\n        'Call function with parameters and display result.',\r\n        function (player, ...)\r\n            local path = nil\r\n            local parameters = {}\r\n            for i, arg in ipairs({...}) do\r\n                if i == 1 then\r\n                    path = tostring(arg)\r\n                else\r\n                    if type(arg) == 'string' then\r\n                        if arg:len() > 2 and arg:sub(1,1) == console.literal then\r\n                            arg = arg:sub(2)\r\n                        else\r\n                            local node, id, parent, found = console.node_from_path(console.fill_path(arg))\r\n                            if node ~= nil and found then\r\n                                arg = node\r\n                            end\r\n                        end\r\n                    end\r\n                    table.insert(parameters, arg)\r\n                end\r\n            end\r\n            if path == nil then\r\n                return console.error_bb .. '<you must supply a function>[-]'\r\n            end\r\n            local location = console.fill_path(path)\r\n            local node, id, parent, found, location = console.node_from_path(location)\r\n            local text = nil\r\n            if node ~= nil and found and type(node) == 'function' then\r\n                console.returned_value = node(unpack(parameters))\r\n                text = tostring(console.returned_value)\r\n                if console.deferred_assignment then\r\n                    local da = console.deferred_assignment\r\n                    if da.command == 'set' then\r\n                        if da.parent[da.id] ~= nil then\r\n                            if da.force or type(console.returned_value) == type(da.parent[da.id]) then\r\n                                da.parent[da.id] = console.returned_value\r\n                                text = text .. '\\n' .. console.header_bb .. \"<set '\" .. da.id .. \"'>[-]\"\r\n                            else\r\n                                text = text .. '\\n' .. console.error_bb .. \"<cannot set '\" .. da.id .. \"': it is of type '\" .. type(da.parent[da.id]) .. \"'>[-]\"\r\n                            end\r\n                        else\r\n                            text = text .. '\\n' .. console.error_bb .. \"<cannot set '\" .. da.id .. \"': it does not exist>[-]\"\r\n                        end\r\n                    elseif da.command == 'add' then\r\n                        if da.parent[da.id] == nil then\r\n                            da.parent[da.id] = console.returned_value\r\n                            text = text .. '\\n' .. console.header_bb .. \"<added '\" .. da.id .. \"'>[-]\"\r\n                        else\r\n                            text = text .. '\\n' .. \"<cannot add '\" .. da.id .. \"': it already exists>[-]\"\r\n                        end\r\n                    end\r\n                    console.deferred_assignment = nil\r\n                end\r\n            else\r\n                text = console.error_bb .. '<not found>[-]'\r\n            end\r\n            return text, false\r\n        end\r\n    )\r\n\r\n    console.add_admin_command('set', '['..console.option..'f] <variable> [<value>]',\r\n        \"Set variable to value.  If no value specified then the next value returned from 'call' is used.\\n\" ..\r\n            console.option ..'f  force overwrite ignoring type',\r\n        function (player, ...)\r\n            local variable = nil\r\n            local value = nil\r\n            local force = false\r\n            for _, arg in ipairs({...}) do\r\n                if type(arg) == 'string' and arg:len() > 1 and arg:sub(1, 1) == console.option then\r\n                    local c = 2\r\n                    while c <= arg:len() do\r\n                        local option = arg:sub(c, c)\r\n                        if option == \"f\" then\r\n                            force = not force\r\n                        else\r\n                            return console.error_bb .. \"<option '\" .. option .. \"' not recognized>[-]\"\r\n                        end\r\n                        c = c + 1\r\n                    end\r\n                elseif variable == nil then\r\n                    variable = tostring(arg)\r\n                else\r\n                    value = arg\r\n                end\r\n            end\r\n            if variable == nil then\r\n                return console.error_bb .. '<you must supply a variable>[-]'\r\n            end\r\n            variable = console.fill_path(variable)\r\n            local node, id, parent, found = console.node_from_path(variable)\r\n            local text = ''\r\n            if node ~= nil and found then\r\n                if value == nil then\r\n                    console.deferred_assignment = {command = 'set', parent = parent, id = id, force = force}\r\n                    text = id .. ': ' .. console.header_bb .. \"<awaiting 'call'>[-]\"\r\n                else\r\n                    console.deferred_assignment = nil\r\n                    if type(value) == 'string' and value:len() > 0  then\r\n                        if value:sub(1, 1) == console.literal then\r\n                            value = value:sub(2)\r\n                        else\r\n                            local value_node, value_id, value_parent, value_found = console.node_from_path(value)\r\n                            if value_node ~= nil and value_found then\r\n                                value = value_node\r\n                            else\r\n                                return console.error_bb .. '<not found>[-]'\r\n                            end\r\n                        end\r\n                    end\r\n                    if type(node) == 'boolean' then\r\n                        if not value or tostring(value):lower() == 'false' then\r\n                            value = false\r\n                        else\r\n                            value = true\r\n                        end\r\n                    end\r\n                    if type(node) == type(value) or force then\r\n                        parent[id] = value\r\n                        text = id .. ': ' .. console.value_bb .. tostring(parent[id]) .. '[-]'\r\n                    else\r\n                        return console.error_bb .. \"<cannot set '\" .. id .. \"': it is of type '\" .. type(node) .. \"'>[-]\"\r\n                    end\r\n                end\r\n            else\r\n                text = console.error_bb .. '<not found>[-]'\r\n            end\r\n            return text\r\n        end\r\n    )\r\n\r\n    console.add_admin_command('toggle', '<boolean>',\r\n        'Toggle specified boolean variable',\r\n        function (player, variable)\r\n            if variable == nil then\r\n                return console.error_bb .. '<you must supply variable>'\r\n            else\r\n                variable = tostring(variable)\r\n            end\r\n            local variable = console.fill_path(variable)\r\n            local node, id, parent, found = console.node_from_path(variable)\r\n            local text = ''\r\n            if node ~= nil and found then\r\n                if type(node) == 'boolean' then\r\n                    if node then\r\n                        parent[id] = false\r\n                        text = id .. ': ' .. console.value_bb .. 'false[-]'\r\n                    else\r\n                        parent[id] = true\r\n                        text = id .. ': ' .. console.value_bb .. 'true[-]'\r\n                    end\r\n                else\r\n                    text = console.error_bb .. '<can only toggle a boolean>[-]'\r\n                end\r\n            else\r\n                text = console.error_bb .. '<not found>[-]'\r\n            end\r\n            return text\r\n        end\r\n    )\r\n    console.add_admin_command('tgl', nil, nil, 'toggle')\r\n\r\n    console.add_admin_command('rm', '<variable>',\r\n        'Remove specified variable',\r\n        function (player, variable)\r\n            if variable == nil then\r\n                return console.error_bb .. '<you must supply variable>'\r\n            else\r\n                variable = tostring(variable)\r\n            end\r\n            local variable = console.fill_path(variable)\r\n            local node, id, parent, found = console.node_from_path(variable)\r\n            local text = ''\r\n            if node ~= nil and found then\r\n                parent[id] = nil\r\n                text = id .. \" removed!\"\r\n            else\r\n                text = console.error_bb .. '<not found>[-]'\r\n            end\r\n            return text\r\n        end\r\n    )\r\n    console.add_admin_command('del', nil, nil, 'rm')\r\n\r\n    console.add_admin_command('add', '<variable> [<value>]',\r\n        \"Create a variable set to value.   If no value specified then the next value returned from 'call' is used.\",\r\n        function (player, variable, value)\r\n            if variable == nil then\r\n                return console.error_bb .. '<you must supply variable>[-]'\r\n            else\r\n                variable = tostring(variable)\r\n            end\r\n            local variable = console.fill_path(variable)\r\n            local node, id, parent, found = console.node_from_path(variable)\r\n            local text = ''\r\n            if found then\r\n                return console.error_bb .. '<already exists>[-]'\r\n            elseif node == nil or id == '' then\r\n                return console.error_bb .. '<not found>[-]'\r\n            else\r\n                if value == nil then\r\n                    console.deferred_assignment = {command = 'add', parent = node, id = id}\r\n                    text = id .. ': ' .. console.header_bb .. \"<awaiting 'call'>[-]\"\r\n                else\r\n                    console.deferred_assignment = nil\r\n                    if type(value) == 'string' and value:len() > 0  then\r\n                        if value:sub(1, 1) == console.literal then\r\n                            value = value:sub(2)\r\n                        else\r\n                            local value_node, value_id, value_parent, value_found = console.node_from_path(value)\r\n                            if value_node ~= nil and value_found then\r\n                                value = value_node\r\n                            else\r\n                                return console.error_bb .. '<not found>[-]'\r\n                            end\r\n                        end\r\n                    end\r\n                    node[id] = value\r\n                    text = id .. ': ' .. console.value_bb .. tostring(value) .. '[-]'\r\n                end\r\n            end\r\n            return text\r\n        end\r\n    )\r\n\r\n    console.add_admin_command('exec', '['..console.option..'?qsv] <commands>',\r\n        'Execute a series of commands held in a string: commands are seperated by a new line or '..console.command_seperator,\r\n        function (player, ...)\r\n            local help_details = console.option..'q    quiet: will not output anything except final output\\n' ..\r\n                                 console.option..'s    silent: will not output anything at all\\n'..\r\n                                 console.option..'v    verbose: will output commands as they execute\\n'\r\n            local commands = nil\r\n            local verbose = false\r\n            local quiet = false\r\n            local silent = false\r\n            for _, arg in ipairs({...}) do\r\n                if type(arg) == 'string' and arg:len() > 1 and arg:sub(1,1) == console.option then\r\n                    local c = 2\r\n                    while c <= arg:len() do\r\n                        local option = arg:sub(c,c)\r\n                        if option == '?' then\r\n                            return help_details\r\n                        elseif option == 'q' then\r\n                            quiet = not quiet\r\n                        elseif option == 's' then\r\n                            silent = not silent\r\n                        elseif option == 'v' then\r\n                            verbose = not verbose\r\n                        else\r\n                            return console.error_bb .. \"<option '\" .. option .. \"' not recognized>\"\r\n                        end\r\n                        c = c + 1\r\n                    end\r\n                elseif commands == nil then\r\n                    commands = tostring(arg)\r\n                end\r\n            end\r\n            if silent then quiet = true end\r\n            if commands:len() > 1 and commands:sub(1, 1) == console.literal then\r\n                commands = commands:sub(2)\r\n            else\r\n                local variable = console.fill_path(commands)\r\n                local node, id, parent, found = console.node_from_path(variable)\r\n                if node ~= nil and found then\r\n                    commands = node\r\n                else\r\n                    return console.error_bb .. '<not found>[-]'\r\n                end\r\n            end\r\n            if commands:find('\\n') then\r\n                commands = console.split(commands, '\\n')\r\n            else\r\n                commands = console.split(commands, console.command_seperator)\r\n            end\r\n            local end_result = nil\r\n            for _, command_text in ipairs(commands) do\r\n                local command = ''\r\n                local command_function = nil\r\n                local parameters = {player}\r\n                local requires_admin = false\r\n                command, command_function, parameters, requires_admin = console.get_command(command_text, player)\r\n                if command ~= '' then\r\n                    if command_function and (player.admin or not requires_admin) then\r\n                        local response, mute = command_function(unpack(parameters))\r\n                        if response ~= nil or mute ~= nil then\r\n                            if not mute and verbose and not quiet then\r\n                                printToColor('\\n'..command_text, player.color, console.command_color)\r\n                            end\r\n                            if response then\r\n                                end_result = response\r\n                                if not quiet then\r\n                                    printToColor(response, player.color, console.output_color)\r\n                                end\r\n                            end\r\n                        end\r\n                    elseif not quiet then\r\n                        if verbose then printToColor('\\n'..command_text, player.color, console.command_color) end\r\n                        printToColor(console.error_bb .. \"<command '\" .. command .. \"' not found>[-]\", player.color, console.output_color)\r\n                    end\r\n                end\r\n            end\r\n            if end_result and not silent then\r\n                printToColor(end_result, player.color, console.output_color)\r\n            end\r\n        end\r\n    )\r\n\r\n    console.add_admin_command('watch', '['..console.option..'?cgp] ['..console.option..'t#] ['..console.option..console.seperator..'<property>] [<variable>]',\r\n        'Watch a variable or object and display it whenever it changes.\\n' .. console.hidden_bb ..\r\n        'Requires you to add a '..console.function_bb..'console.update()[-] call to an ' ..\r\n        console.function_bb .. 'onUpdate[-] event in your code.[-]\\n',\r\n        function (player, ...)\r\n            local help_details = 'Call without a parameter to display watched items, or with a variable to add it to watch list.\\n' ..\r\n                                console.option..'c will clear variable if specified, or all.\\n' ..\r\n                                console.option..'g will let you specify an object by its GUID.\\n' ..\r\n                                console.option..'t# will throttle output to # seconds.\\n' ..\r\n                                console.option..console.seperator..'<property> will watch the property of the variable.\\n' ..\r\n                                console.option..'p will pause or unpause watching.\\n'\r\n            local path = nil\r\n            local clearing = false\r\n            local throttle = nil\r\n            local pause_changed = false\r\n            local by_guid = false\r\n            local parameters = {}\r\n            local labels = {}\r\n            local property = nil\r\n            for _, arg in ipairs({...}) do\r\n                if type(arg) == 'string' and arg:len() > 1 and arg:sub(1,1) == console.option then\r\n                    local c = 2\r\n                    while c <= arg:len() do\r\n                        local option = arg:sub(c,c)\r\n                        if option == '?' then\r\n                            return help_details\r\n                        elseif option == 'c' then\r\n                            clearing = not clearing\r\n                        elseif option == 'p' then\r\n                            pause_changed = not pause_changed\r\n                        elseif option == 'g' then\r\n                            by_guid = not by_guid\r\n                        elseif option == console.seperator then\r\n                            if arg:len() > c then\r\n                                property = arg:sub(c + 1)\r\n                                c = arg:len() + 1\r\n                            end\r\n                        elseif option == 't' then\r\n                            local n = ''\r\n                            local j = c + 1\r\n                            while j <= arg:len() do\r\n                                local char = arg:sub(j, j)\r\n                                if char:match('[0-9.]') then\r\n                                    n = n .. char\r\n                                else\r\n                                    break\r\n                                end\r\n                                j = j + 1\r\n                            end\r\n                            c = j - 1\r\n                            if n == '' then\r\n                                return console.error_bb .. '<you must provide a throttle duration (in seconds)>[-]'\r\n                            else\r\n                                throttle = tonumber(n)\r\n                            end\r\n                        else\r\n                            return console.error_bb .. \"<option '\" .. option .. \"' not recognized>\"\r\n                        end\r\n                        c = c + 1\r\n                    end\r\n                else\r\n                    if path == nil then\r\n                        path = tostring(arg)\r\n                    else\r\n                        local label = tostring(arg)\r\n                        if type(arg) == 'string' then\r\n                            if arg:len() > 2 and arg:sub(1,1) == console.literal then\r\n                                arg = arg:sub(2)\r\n                                label = arg\r\n                            else\r\n                                local node, id, parent, found = console.node_from_path(console.fill_path(arg))\r\n                                if node ~= nil and found then\r\n                                    arg = node\r\n                                end\r\n                            end\r\n                        end\r\n                        table.insert(labels, label)\r\n                        table.insert(parameters, arg)\r\n                    end\r\n                end\r\n            end\r\n            local text = ''\r\n            if pause_changed then\r\n                if console.watch_list_paused then\r\n                    console.watch_list_paused = nil\r\n                    text = text .. console.header_bb .. '<unpaused>[-]'\r\n                else\r\n                    console.watch_list_paused = true\r\n                    text = text .. console.header_bb .. '<paused>[-]'\r\n                end\r\n            end\r\n            if path == nil then\r\n                if throttle ~= nil then\r\n                    text = text .. '\\n' .. console.error_bb .. '<you must provide a variable or object>[-]'\r\n                elseif by_guid then\r\n                    text = text .. '\\n' .. console.error_bb .. '<you must provide a GUID>[-]'\r\n                elseif clearing then\r\n                    console.watch_list = nil\r\n                    console.watch_list_paused = nil\r\n                    text = text .. '\\nWatch list cleared!'\r\n                elseif not pause_changed then\r\n                    if console.watch_list then\r\n                        local watched = {}\r\n                        for label, watch in pairs(console.watch_list) do\r\n                            if watch.player == player.color then\r\n                                table.insert(watched, label)\r\n                            end\r\n                        end\r\n                        table.sort(watched)\r\n                        text = text .. '\\n'..console.header_bb..'Watching:[-]'\r\n                        for _, label in ipairs(watched) do\r\n                            local watch = console.watch_list[label]\r\n                            local is_guid = (label:len() == 6 and label:sub(1,1) ~= console.seperator)\r\n                            local node, id, parent, found\r\n                            local prefix\r\n                            text = text .. '\\n'\r\n                            if is_guid then\r\n                                prefix =  console.format_guid(label)\r\n                                node = getObjectFromGUID(label)\r\n                                found = tostring(node) ~= 'null'\r\n                            else\r\n                                prefix = label\r\n                                node, id, parent, found = console.node_from_path(label)\r\n                            end\r\n                            if node ~= nil and found then\r\n                                if type(node) == 'userdata' then\r\n                                    prefix = console.object_bb .. prefix .. '[-]'\r\n                                    local position = node.getPosition()\r\n                                    local rotation = node.getRotation()\r\n                                    local p = function (x) return math.floor(x * 100) * 0.01 end\r\n                                    local r = function (x) return math.floor(x + 0.5) end\r\n                                    text = text .. prefix .. console.value_bb .. ' ∡ '..r(rotation.x)..' '..r(rotation.y)..' '..r(rotation.z) .. '[-]'..\r\n                                            console.boolean_bb..'   ⊞  '..p(position.x)..'   '..p(position.y)..'   '..p(position.z)\r\n                                elseif type(node) == 'function' then\r\n                                    local result = node(unpack(console.watch_list[label].parameters))\r\n                                    if watch.property and (type(result) == 'table' or type(result) == 'userdata') then\r\n                                        result = result[watch.property]\r\n                                        if type(result) == 'function' then\r\n                                            result = result()\r\n                                        end\r\n                                    end\r\n                                    result = tostring(result)\r\n                                    if watch.propery and watch.property:lower():find('guid') then\r\n                                        result = console.format_guid(result)\r\n                                    end\r\n                                    if result:len() > console.crop_string_at then result = result:sub(1, console.crop_string_at) .. '...' end\r\n                                    text = text .. watch.label .. console.value_bb .. result .. '[-]'\r\n                                else\r\n                                    if type(node) == 'boolean' then\r\n                                        if node then\r\n                                            node = 'true'\r\n                                        else\r\n                                            node = 'false'\r\n                                        end\r\n                                    elseif type(node) == 'string' then\r\n                                        if node:len() > console.crop_string_at then node = node:sub(1, console.crop_string_at):gsub('\\n', ' ') .. '...' end\r\n                                    end\r\n                                    text = text .. prefix .. ': ' .. console.value_bb .. node .. '[-]'\r\n                                end\r\n                            end\r\n                        end\r\n                    else\r\n                        text = text .. \"\\nWatch list is empty.\"\r\n                    end\r\n                end\r\n            else\r\n                if not by_guid then\r\n                    path = console.fill_path(path)\r\n                end\r\n                if clearing then\r\n                    local node, id, parent, found\r\n                    if not by_guid then\r\n                        node, id, parent, found, path = console.node_from_path(path)\r\n                    end\r\n                    if console.watch_list[path] then\r\n                        console.watch_list[path] = nil\r\n                        if next(console.watch_list) == nil then\r\n                            console.watch_list = nil\r\n                        end\r\n                        text = text .. '\\n' .. console.header_bb.. 'No longer watching:[-] ' .. path\r\n                    else\r\n                        text = text .. '\\n' .. console.error_bb .. '<not found>[-]'\r\n                    end\r\n                else\r\n                    local node, id, parent, found\r\n                    if by_guid then\r\n                        node = getObjectFromGUID(path)\r\n                        found = tostring(node) ~= 'null'\r\n                    else\r\n                        node, id, parent, found, path = console.node_from_path(path)\r\n                    end\r\n                    if node ~= nil and found then\r\n                        if console.watch_list == nil then console.watch_list = {} end\r\n                        if throttle == nil then throttle = 0 end\r\n                        console.watch_list[path] = {player=player.color, throttle=throttle, last_check=0, property=property}\r\n                        if type(node) == 'userdata' then\r\n                            console.watch_list[path].position = node.getPosition()\r\n                            console.watch_list[path].rotation = node.getRotation()\r\n                            console.watch_list[path].is_guid  = by_guid\r\n                        elseif type(node) == 'function' then\r\n                            console.watch_list[path].parameters = parameters\r\n                            console.watch_list[path].value = node\r\n                            console.watch_list[path].label = console.function_bb .. path .. '[-]'\r\n                            if property then\r\n                                console.watch_list[path].label = console.watch_list[path].label .. console.seperator .. property\r\n                            end\r\n                            for _, label in ipairs(labels) do\r\n                                console.watch_list[path].label = console.watch_list[path].label .. ' ' .. console.hidden_bb .. label .. '[-]'\r\n                            end\r\n                            console.watch_list[path].label = console.watch_list[path].label .. ': '\r\n                        else\r\n                            console.watch_list[path].value = node\r\n                        end\r\n                        if by_guid then\r\n                            path = console.format_guid(path)\r\n                        end\r\n                        text = text .. '\\n' .. console.header_bb .. 'Watching:[-] ' .. path\r\n                    else\r\n                        text = text .. '\\n' .. console.error_bb .. '<not found>[-]'\r\n                    end\r\n                end\r\n            end\r\n            if text:len() > 1 and text:sub(1, 1) == '\\n' then\r\n                text = text:sub(2)\r\n            end\r\n            return text\r\n        end\r\n    )\r\n\r\n    console.add_player_command('shout', '<text>',\r\n        'Broadcast <text> to all players. Colour a section with {RRGGBB}section{-}.',\r\n        function (player, ...)\r\n            local text = player.steam_name .. ': '\r\n            local space = ''\r\n            for _, word in ipairs({...}) do\r\n                text = text .. space .. tostring(word)\r\n                space = ' '\r\n            end\r\n            text = text:gsub('{','[')\r\n            text = text:gsub('}',']')\r\n            broadcastToAll(text, stringColorToRGB(player.color))\r\n            return nil, false\r\n        end\r\n    )\r\n\r\n    -- change the command help color so client added commands appear different to console++\r\n    console.set_command_listing_bb('[A0F0C0]')\r\nend\r\n\nend)\n__bundle_register(\"Console/console\", function(require, _LOADED, __bundle_register, __bundle_modules)\nif not console then\r\n    console = {}\r\n\r\n    -- Change these values as you wish\r\n    console.command_char = '>'\r\n    console.option       = '-'\r\n    console.prompt_color  = {r = 0.8,  g = 1.0,  b = 0.8 }\r\n    console.command_color = {r = 0.8,  g = 0.6,  b = 0.8 }\r\n    console.output_color  = {r = 0.88, g = 0.88, b = 0.88}\r\n    console.invalid_color = {r = 1.0,  g = 0.2,  b = 0.2 }\r\n    console.header_bb       = '[EECCAA]'\r\n    console.error_bb        = '[FF9999]'\r\n    console.inbuilt_help_bb = '[E0E0E0]'\r\n    console.client_help_bb  = '[C0C0FF]'\r\n\r\n    -- Exposed methods:\r\n\r\n    function console.add_validation_function(validation_function)\r\n        -- Adds a validation function all chat will be checked against:\r\n        -- function(string message) which returns (boolean valid, string response)\r\n        -- If all validation functions return <valid> as true the message will be displayed.\r\n        -- If one returns <valid> as false then its <response> will be displayed to that player instead.\r\n        table.insert(console.validation_functions, validation_function)\r\n    end\r\n\r\n    function console.add_player_command(command, parameter_text, help_text, command_function, default_parameters)\r\n        -- Adds a command anyone can use, see below for details\r\n        console.add_command(command, false, parameter_text, help_text, command_function, default_parameters)\r\n    end\r\n\r\n    function console.add_admin_command(command, parameter_text, help_text, command_function, default_parameters)\r\n        -- Adds a command only admins can use, see below for details\r\n        console.add_command(command, true, parameter_text, help_text, command_function, default_parameters)\r\n    end\r\n\r\n    function console.add_command(command, requires_admin, parameter_text, help_text, command_function, default_parameters)\r\n        -- Adds a command to the console.\r\n        -- command_function must take <player> as its first argument, and then any\r\n        --   subsequent arguments you wish which will be provided by the player.\r\n        -- You may alias an already-present command by calling this with command_function set to\r\n        --   the command string instead of a function.  default_parameters can be set for the alias.\r\n        -- See basic built-in commands at the bottom of this file for examples.\r\n        local commands = console.commands\r\n        local command_function = command_function\r\n        local help_text = help_text\r\n        local parameter_text = parameter_text\r\n        if type(command_function) == 'string' then --alias\r\n            if help_text == nil then\r\n                help_text = commands[command_function].help_text\r\n            end\r\n            if parameter_text == nil then\r\n                parameter_text = commands[command_function].parameter_text\r\n            end\r\n            command_function = commands[command_function].command_function\r\n        end\r\n        console.commands[command] = {\r\n            command_function   = command_function,\r\n            requires_admin     = requires_admin,\r\n            parameter_text     = parameter_text,\r\n            help_text          = help_text,\r\n            help_bb            = console.command_help_bb,\r\n            default_parameters = default_parameters,\r\n        }\r\n    end\r\n\r\n    function console.set_command_listing_bb(bb)\r\n        -- Tags commands added after with a bb color for when they are displayed (i.e. with 'help')\r\n        console.command_help_bb = bb\r\n    end\r\n\r\n    function console.disable()\r\n        -- Disables console for command purposes, but leaves validation functions running\r\n        console.active = false\r\n    end\r\n\r\n    function console.enable()\r\n        -- Enables console commands (console commands are on by default)\r\n        console.active = true\r\n    end\r\n\r\n    -- End of exposed methods.  You shouldn't need to interact with anything below (under normal circumstances)\r\n\r\n\r\n    console.active = true\r\n    console.in_command_mode = {}\r\n    console.commands = {}\r\n    console.validation_functions = {}\r\n    console.set_command_listing_bb(console.inbuilt_help_bb)\r\n\r\n    function onChat(message, player)\r\n        if message ~= '' then\r\n            local command = ''\r\n            local command_function = nil\r\n            local parameters = {player}\r\n            local requires_admin = false\r\n            local command_mode = console.in_command_mode[player.steam_id]\r\n            if command_mode and console.active then\r\n                command, command_function, parameters, requires_admin = console.get_command(message, player)\r\n            elseif message:sub(1, 1) == console.command_char and console.active then\r\n                if message:len() > 1 then\r\n                    command, command_function, parameters, requires_admin = console.get_command(message:sub(2), player)\r\n                else\r\n                    command, command_function, parameters, requires_admin = console.get_command(console.command_char, player)\r\n                end\r\n            else\r\n                for i, f in ipairs(console.validation_functions) do\r\n                    local valid, response = f(message)\r\n                    if response == nil then response = '' end\r\n                    if not valid then\r\n                        printToColor(response, player.color, console.invalid_color)\r\n                        return false\r\n                    end\r\n                end\r\n                return true\r\n            end\r\n            if console.active then\r\n                if command_function and (player.admin or not requires_admin) then\r\n                    if command_mode then\r\n                        message = console.command_char .. console.command_char .. message\r\n                    end\r\n                    local response, mute = command_function(unpack(parameters))\r\n                    if response ~= nil or mute ~= nil then\r\n                        if not mute then\r\n                            printToColor('\\n'..message, player.color, console.command_color)\r\n                        end\r\n                        if response then\r\n                            printToColor(response, player.color, console.output_color)\r\n                        end\r\n                    end\r\n                    if console.in_command_mode[player.steam_id] then console.display_prompt(player) end\r\n                    return false\r\n                else\r\n                    printToColor('\\n'..message, player.color, console.command_color)\r\n                    printToColor(console.error_bb .. \"<command '\" .. command .. \"' not found>[-]\", player.color, console.output_color)\r\n                    return false\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    function console.get_command(message, player)\r\n        local command_name = ''\r\n        local command_function = nil\r\n        local requires_admin = false\r\n        local parameters = {player}\r\n        for i, part in ipairs(console.split(message)) do\r\n            if i == 1 then\r\n                command_name = part\r\n                local command = console.commands[command_name]\r\n                if command then\r\n                    command_function = command.command_function\r\n                    requires_admin = command.requires_admin\r\n                    if command.default_parameters then\r\n                        for _, parameter in ipairs(command.default_parameters) do\r\n                            table.insert(parameters, parameter)\r\n                        end\r\n                    end\r\n                end\r\n            else\r\n                table.insert(parameters, part)\r\n            end\r\n        end\r\n        return command_name, command_function, parameters, requires_admin\r\n    end\r\n\r\n    function console.display_prompt(player)\r\n        printToColor(console.command_char..console.command_char, player.color, console.prompt_color)\r\n    end\r\n\r\n    function console.split(text, split_on)\r\n        local split_on = split_on or ' '\r\n        if type(split_on) == 'string' then\r\n            local s = {}\r\n            for c = 1, split_on:len() do\r\n                s[split_on:sub(c,c)] = true\r\n            end\r\n            split_on = s\r\n        end\r\n        local parts = {}\r\n        if text ~= '' then\r\n            local make_table = function(s)\r\n                local entries = console.split(s, ' ,')\r\n                local t = {}\r\n                for _, entry in ipairs(entries) do\r\n                    if type(entry) == 'string' and entry:find('=') then\r\n                        e = console.split(entry, '=')\r\n                        t[e[1]] = e[2]\r\n                    else\r\n                        table.insert(t, entry)\r\n                    end\r\n                end\r\n                return t\r\n            end\r\n            local current_split_on = split_on\r\n            local adding = false\r\n            local part = \"\"\r\n            local totype = tonumber\r\n            for c = 1, text:len() do\r\n                local char = text:sub(c, c)\r\n                if adding then\r\n                    if current_split_on[char] then -- ended current part\r\n                        if totype(part) ~= nil then\r\n                            table.insert(parts, totype(part))\r\n                        else\r\n                            table.insert(parts, part)\r\n                        end\r\n                        adding = false\r\n                        current_split_on = split_on\r\n                        totype = tonumber\r\n                    else\r\n                        part = part .. char\r\n                    end\r\n                else\r\n                    if not current_split_on[char] then -- found start of part\r\n                        if char == \"'\" then\r\n                            current_split_on = {[\"'\"] = true}\r\n                            totype = tostring\r\n                            part = ''\r\n                        elseif char == '\"' then\r\n                            current_split_on = {['\"'] = true}\r\n                            totype = tostring\r\n                            part = ''\r\n                        elseif char == '{' then\r\n                            current_split_on = {['}'] = true}\r\n                            totype = make_table\r\n                            part = ''\r\n                        else\r\n                            part = char\r\n                        end\r\n                        adding = true\r\n                    end\r\n                end\r\n            end\r\n            if adding then\r\n                if totype(part) ~= nil then\r\n                    table.insert(parts, totype(part))\r\n                else\r\n                    table.insert(parts, part)\r\n                end\r\n            end\r\n        end\r\n        return parts\r\n    end\r\n\r\n\r\n    -- Add basic built-in console commands\r\n\r\n    console.add_player_command('help', '[' .. console.option .. 'all|<command>]',\r\n        'Display available commands or help on all commands or help on a specific command.',\r\n        function (player, command)\r\n            if command ~= nil then\r\n                command = tostring(command)\r\n            end\r\n            local make_help = function (command)\r\n                return console.header_bb .. command .. ' ' .. console.commands[command].parameter_text ..\r\n                        '[-]\\n' .. console.commands[command].help_text\r\n            end\r\n            local info_mode = false\r\n            if command == console.option..'all' then\r\n                info_mode = true\r\n            end\r\n            if command and console.commands[command] then\r\n                return make_help(command)\r\n            elseif command and not info_mode then\r\n                return console.error_bb .. \"<command '\" .. command .. \"' not found>[-]\"\r\n            else\r\n                local msg = console.header_bb .. 'Available commands:[-]'\r\n                local command_list = {}\r\n                for c, _ in pairs(console.commands) do\r\n                    if player.admin or not console.commands[c].requires_admin then\r\n                        if info_mode then\r\n                            table.insert(command_list, make_help(c))\r\n                        else\r\n                            table.insert(command_list, c)\r\n                        end\r\n                    end\r\n                end\r\n                table.sort(command_list)\r\n                local sep\r\n                if info_mode then\r\n                    sep = '\\n\\n'\r\n                else\r\n                    sep = '\\n'\r\n                end\r\n                for _, c in ipairs(command_list) do\r\n                    local cmd = console.commands[c]\r\n                    if cmd then\r\n                        msg = msg .. sep .. cmd.help_bb .. c .. '[-]'\r\n                    else\r\n                        msg = msg .. sep .. c\r\n                    end\r\n                    if not info_mode then sep = ', ' end\r\n                end\r\n                return msg\r\n            end\r\n        end\r\n    )\r\n    console.add_player_command('?', nil, nil, 'help')\r\n    console.add_player_command('info', '', 'Display help on all available commands.', 'help', {console.option..'all'})\r\n\r\n    console.add_player_command('exit', '',\r\n        \"Leave <command mode> ('\" .. console.command_char .. \"' does the same).\",\r\n        function (player)\r\n            console.in_command_mode[player.steam_id] = nil\r\n            return console.header_bb .. '<command mode: off>[-]'\r\n        end\r\n    )\r\n\r\n    console.add_player_command('cmd', '',\r\n        \"Enter <command mode> ('\" .. console.command_char .. \"' does the same).\",\r\n        function (player)\r\n            console.in_command_mode[player.steam_id] = true\r\n            return console.header_bb .. '<command mode: on>[-]'\r\n        end\r\n    )\r\n\r\n    console.add_player_command(console.command_char, '',\r\n        'Toggle <command mode>',\r\n        function (player)\r\n            console.in_command_mode[player.steam_id] = not console.in_command_mode[player.steam_id]\r\n            if console.in_command_mode[player.steam_id] then\r\n                return console.header_bb .. '<command mode: on>[-]', true\r\n            else\r\n                return console.header_bb .. '<command mode: off>[-]', true\r\n            end\r\n        end\r\n    )\r\n\r\n    console.add_player_command('=', '<expression>',\r\n        'Evaluate an expression',\r\n        function (player, ...)\r\n            local expression = ''\r\n            for _, arg in ipairs({...}) do\r\n                expression = expression .. ' ' .. tostring(arg)\r\n            end\r\n            if not player.admin then\r\n                expression = expression:gasub('[a-zA-Z~]', '')\r\n            end\r\n            console.returned_value = dynamic.eval(expression)\r\n            return console.returned_value\r\n        end\r\n    )\r\n\r\n    console.add_player_command('echo', '<text>',\r\n        'Display text on screen',\r\n        function (player, ...)\r\n            local text = ''\r\n            for _, arg in ipairs({...}) do\r\n                text = text .. ' ' .. tostring(arg)\r\n            end\r\n            printToColor(text, player.color, console.output_color)\r\n            return false\r\n        end\r\n    )\r\n\r\n    console.add_player_command('cls', '',\r\n        'Clear console text',\r\n        function (player)\r\n            return '\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n' ..\r\n                   '\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\r\n        end\r\n    )\r\n\r\n    console.add_player_command('alias', '<alias> <command> [<parameter>...]',\r\n        'Create a command alias.',\r\n        function (player, ...)\r\n            local alias\r\n            local command\r\n            local parameters = {}\r\n            for i, arg in ipairs({...}) do\r\n                if i == 1 then\r\n                    alias = tostring(arg)\r\n                elseif i == 2 then\r\n                    command = tostring(arg)\r\n                else\r\n                    table.insert(parameters, arg)\r\n                end\r\n            end\r\n            if not alias then\r\n                return console.error_bb .. '<must provide an alias>[-]'\r\n            --elseif console.commands[alias] ~= nil then\r\n            --    return console.error_bb .. \"<command '\" .. alias .. \"' already exists!>[-]\"\r\n            elseif command == nil then\r\n                return console.error_bb .. \"<must provide a command>[-]\"\r\n            elseif console.commands[command] == nil then\r\n                return console.error_bb .. \"<command '\" .. command .. \"' does not exist>[-]\"\r\n            else\r\n                local text = console.header_bb .. alias .. '[-] = ' .. command\r\n                local help_text = console.commands[command].help_text\r\n                if not help_text:find('\\nAliased to: ') then\r\n                    help_text = help_text .. '\\nAliased to: ' .. command\r\n                end\r\n                local combined_parameters = {}\r\n                if console.commands[command].default_parameters then\r\n                    for _, parameter in ipairs(console.commands[command].default_parameters) do\r\n                        table.insert(combined_parameters, parameter)\r\n                    end\r\n                end\r\n                for _, parameter in ipairs(parameters) do\r\n                    table.insert(combined_parameters, parameter)\r\n                    text = text .. ' ' .. parameter\r\n                    help_text = help_text .. ' ' .. parameter\r\n                end\r\n                console.add_command(alias, console.commands[command].requires_admin, console.commands[command].parameter_text, help_text, command, combined_parameters)\r\n                return text\r\n            end\r\n        end\r\n    )\r\n\r\n    -- change the command help color so client added commands appear different to in-built\r\n    console.set_command_listing_bb(console.client_help_bb)\r\nend\r\n\nend)\nreturn __bundle_require(\"Global.-1.lua\")",
  "LuaScriptState": "",
  "XmlUI": "<!-- Xml UI. See documentation: https://api.tabletopsimulator.com/ui/introUI/ -->",
  "ObjectStates": [
    {
      "GUID": "9f0ee9",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -13.6426306,
        "posY": 3.57056236,
        "posZ": -7.487546,
        "rotX": 0.0,
        "rotY": 60.0000038,
        "rotZ": 0.0,
        "scaleX": 10.2680759,
        "scaleY": 6.633869,
        "scaleZ": 4.893235
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.856,
        "g": 0.09999997,
        "b": 0.09399996,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Red",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "39ee84",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -13.3167524,
        "posY": 3.57056236,
        "posZ": 8.302005,
        "rotX": 0.0,
        "rotY": 120.000008,
        "rotZ": 0.0,
        "scaleX": 10.26808,
        "scaleY": 6.633869,
        "scaleZ": 4.8932333
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.171999961,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Yellow",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "4dfee9",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 13.5726471,
        "posY": 3.57056332,
        "posZ": 7.748528,
        "rotX": 0.0,
        "rotY": 240.0,
        "rotZ": 0.0,
        "scaleX": 10.2680712,
        "scaleY": 6.633869,
        "scaleZ": 4.89323235
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.117999978,
        "g": 0.53,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Blue",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "462039",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -9.536743E-07,
        "posY": 3.57056332,
        "posZ": -15.5326672,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 10.2680635,
        "scaleY": 6.6338706,
        "scaleZ": 4.89322853
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "White",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "eaa5e5",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 0.00127696991,
        "posY": 3.57056427,
        "posZ": 15.5941267,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 10.2680683,
        "scaleY": 6.633869,
        "scaleZ": 4.89322948
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.191999972,
        "g": 0.701,
        "b": 0.167999953,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Green",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "1ee299",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 13.6821451,
        "posY": 3.57056427,
        "posZ": -7.40765858,
        "rotX": 0.0,
        "rotY": 300.0,
        "rotZ": 0.0,
        "scaleX": 10.2680655,
        "scaleY": 6.633869,
        "scaleZ": 4.893227
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.96,
        "g": 0.438999981,
        "b": 0.807,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Pink",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "f42a3c",
      "Name": "Deck",
      "Transform": {
        "posX": 0.0143360458,
        "posY": 1.23126042,
        "posZ": -0.0159234349,
        "rotX": -1.05063955E-05,
        "rotY": 179.959824,
        "rotZ": 179.999985,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "LayoutGroupSortIndex": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": true,
      "Hands": false,
      "SidewaysCard": false,
      "DeckIDs": [
        1,
        35,
        4,
        31,
        30,
        19,
        50,
        21,
        34,
        27,
        23,
        39,
        16,
        2,
        0,
        36,
        17,
        29,
        44,
        32,
        20,
        11,
        6,
        42,
        38,
        13,
        10,
        24,
        40,
        47,
        37,
        28,
        9,
        51,
        48,
        22,
        18,
        49,
        8,
        43,
        3,
        12,
        15,
        26,
        46,
        25,
        7,
        33,
        14,
        45,
        5,
        41
      ],
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "df644d",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 1,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "048a8f",
          "Name": "Card",
          "Transform": {
            "posX": 0.315056115,
            "posY": 1.51076508,
            "posZ": 0.5117501,
            "rotX": 359.565826,
            "rotY": 6.965557,
            "rotZ": 180.227325,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 35,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "361cd8",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 4,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "fc90b1",
          "Name": "Card",
          "Transform": {
            "posX": -2.06232166,
            "posY": 1.76948619,
            "posZ": -0.498551458,
            "rotX": 357.648651,
            "rotY": 6.86053276,
            "rotZ": 184.143509,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 31,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "48fc5d",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 30,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "122772",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 19,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "c1d72d",
          "Name": "Card",
          "Transform": {
            "posX": -3.463034,
            "posY": 1.94217443,
            "posZ": -1.35058045,
            "rotX": 1.59862661,
            "rotY": 6.96028137,
            "rotZ": 186.530945,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 50,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "20ff3c",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 21,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "9a49f9",
          "Name": "Card",
          "Transform": {
            "posX": -6.939274,
            "posY": 1.96574438,
            "posZ": -3.57258034,
            "rotX": 2.09508061,
            "rotY": 0.213327676,
            "rotZ": 183.953247,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 34,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "e7c89d",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 27,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "ba685d",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 23,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "bb6438",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 39,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "5460ac",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 16,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "ef31ef",
          "Name": "Card",
          "Transform": {
            "posX": -6.15424633,
            "posY": 1.95397532,
            "posZ": -3.12427926,
            "rotX": 2.09508061,
            "rotY": 0.2133274,
            "rotZ": 183.953247,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 2,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "cc6907",
          "Name": "Card",
          "Transform": {
            "posX": -0.160047725,
            "posY": 1.46233392,
            "posZ": -0.09729092,
            "rotX": 359.953674,
            "rotY": 0.00103153987,
            "rotZ": 180.94635,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 0,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "e96351",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 36,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "3e97d3",
          "Name": "Card",
          "Transform": {
            "posX": -3.23677254,
            "posY": 1.75874007,
            "posZ": -1.17667878,
            "rotX": 357.648651,
            "rotY": 6.860534,
            "rotZ": 184.1435,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 17,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "18a554",
          "Name": "Card",
          "Transform": {
            "posX": -0.3920431,
            "posY": 1.58379138,
            "posZ": -0.319337875,
            "rotX": 2.03951788,
            "rotY": 335.88092,
            "rotZ": 189.038025,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 29,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "c6d070",
          "Name": "Card",
          "Transform": {
            "posX": -2.87522054,
            "posY": 1.94280171,
            "posZ": -1.0124892,
            "rotX": 1.59862673,
            "rotY": 6.960281,
            "rotZ": 186.530945,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 44,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "0b299b",
          "Name": "Card",
          "Transform": {
            "posX": -2.28740764,
            "posY": 1.94342911,
            "posZ": -0.6743979,
            "rotX": 1.59862673,
            "rotY": 6.960281,
            "rotZ": 186.530945,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 32,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "617c70",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 20,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "fe747d",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 11,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "bd4af8",
          "Name": "Card",
          "Transform": {
            "posX": -5.5228076,
            "posY": 1.78228509,
            "posZ": -3.57131028,
            "rotX": 0.0004430708,
            "rotY": -1.8839269E-07,
            "rotZ": 179.951279,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 6,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "d700da",
          "Name": "Card",
          "Transform": {
            "posX": -0.271054953,
            "posY": 1.55605423,
            "posZ": 0.17320469,
            "rotX": 359.565826,
            "rotY": 6.96555662,
            "rotZ": 180.227325,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 42,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "45d047",
          "Name": "Card",
          "Transform": {
            "posX": 0.0144734513,
            "posY": 0.97360307,
            "posZ": -0.0152639188,
            "rotX": 2.57787287E-05,
            "rotY": 179.998123,
            "rotZ": 180.000122,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 38,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "7c9338",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 13,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "8d4df0",
          "Name": "Card",
          "Transform": {
            "posX": -2.64954638,
            "posY": 1.76411319,
            "posZ": -0.8376151,
            "rotX": 357.648651,
            "rotY": 6.860534,
            "rotZ": 184.1435,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 10,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "8f61c5",
          "Name": "Card",
          "Transform": {
            "posX": -0.0644461662,
            "posY": 1.60505533,
            "posZ": 0.274021626,
            "rotX": 2.0391686,
            "rotY": 335.8809,
            "rotZ": 189.030853,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 24,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "7d7535",
          "Name": "Card",
          "Transform": {
            "posX": -4.58419228,
            "posY": 1.930437,
            "posZ": -2.22767687,
            "rotX": 2.09508061,
            "rotY": 0.21332708,
            "rotZ": 183.953247,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 40,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "592298",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 47,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "e42fba",
          "Name": "Card",
          "Transform": {
            "posX": -0.601189733,
            "posY": 1.4744935,
            "posZ": -0.331085443,
            "rotX": 359.963257,
            "rotY": 0.0024855542,
            "rotZ": 182.660843,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 37,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "fdd8d3",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 28,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "cdc92b",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 9,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "a2e8ce",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 51,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "dfe013",
          "Name": "Card",
          "Transform": {
            "posX": 0.8995,
            "posY": 1.47001374,
            "posZ": 0.849663258,
            "rotX": 359.6229,
            "rotY": 6.968473,
            "rotZ": 180.310745,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 48,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "ae81e0",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 22,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "49bf7a",
          "Name": "Card",
          "Transform": {
            "posX": 0.0144713968,
            "posY": 1.42866468,
            "posZ": -0.0152598638,
            "rotX": 0.00118469365,
            "rotY": 180.010574,
            "rotZ": 179.991653,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 18,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "b85cd1",
          "Name": "Card",
          "Transform": {
            "posX": -2.00486565,
            "posY": 1.58228469,
            "posZ": -1.54022622,
            "rotX": 0.0004430708,
            "rotY": -1.8839269E-07,
            "rotZ": 179.951279,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 49,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "6cae49",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 8,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "113891",
          "Name": "Card",
          "Transform": {
            "posX": -1.6995945,
            "posY": 1.94405639,
            "posZ": -0.336306661,
            "rotX": 1.59862661,
            "rotY": 6.960281,
            "rotZ": 186.530945,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 43,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "813bbb",
          "Name": "Card",
          "Transform": {
            "posX": -0.350751728,
            "posY": 1.4530791,
            "posZ": 0.06790167,
            "rotX": -3.21071566E-05,
            "rotY": 1.28443241E-06,
            "rotZ": 179.025833,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 3,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "42b4eb",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 12,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "fbe0b8",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 15,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "0b6b13",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 26,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "c956d7",
          "Name": "Card",
          "Transform": {
            "posX": -0.856184959,
            "posY": 1.60170794,
            "posZ": -0.164914474,
            "rotX": 359.57785,
            "rotY": 6.971603,
            "rotZ": 180.075226,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 46,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "c2ea94",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 25,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "224e73",
          "Name": "Card",
          "Transform": {
            "posX": -5.3692193,
            "posY": 1.94220614,
            "posZ": -2.67597818,
            "rotX": 2.09508061,
            "rotY": 0.2133274,
            "rotZ": 183.953247,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 7,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "b5433b",
          "Name": "Card",
          "Transform": {
            "posX": 1.51333141,
            "posY": 1.45344377,
            "posZ": 0.490894139,
            "rotX": 359.99353,
            "rotY": 0.00134950469,
            "rotZ": 177.791092,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 33,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "881f53",
          "Name": "Card",
          "Transform": {
            "posX": -5.06124735,
            "posY": 1.64634514,
            "posZ": -2.4736557,
            "rotX": 358.253,
            "rotY": 359.908966,
            "rotZ": 185.092056,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 14,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        },
        {
          "GUID": "b3d1e1",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 45,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "07176a",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 5,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        },
        {
          "GUID": "431035",
          "Name": "Card",
          "Transform": {
            "posX": 0.05418539,
            "posY": 2.23126,
            "posZ": 0.310450554,
            "rotX": -5.008956E-06,
            "rotY": 180.0,
            "rotZ": 180.0,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "Hands": true,
          "CardID": 41,
          "SidewaysCard": false,
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "ContainedObjects": []
        }
      ]
    },
    {
      "GUID": "76191e",
      "Name": "BlockSquare",
      "Transform": {
        "posX": -0.0904232562,
        "posY": 1.46000087,
        "posZ": 3.007198,
        "rotX": 6.284378E-05,
        "rotY": 1.10760666E-05,
        "rotZ": -7.86433448E-05,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.9264706,
        "g": 0.0,
        "b": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "function onLoad(save_state)\r\n    self.setLock(true)\r\n    self.setScale(Vector(1, 0.125, 1))\r\n    self.setPosition(Vector(0, 0.875, 0))\r\n\r\n    hideAll()\r\nend\r\n\r\nfunction hideAll()\r\n    hideSuitButtons()\r\n    hideSuitText()\r\n    hideCrankText()\r\nend\r\n\r\nfunction onClick(player, value, id)\r\n    Global.call(\"onSuitButtonClick\", { player = player, suit = tonumber(id) })\r\nend\r\n\r\nfunction setEnabledSuits(suit_choice)\r\n    hideSuitText()\r\n    hideCrankText()\r\n\r\n    for suit, enabled in pairs(suit_choice) do\r\n        self.UI.setAttribute(tostring(suit), \"interactable\", enabled)\r\n    end\r\n\r\n    self.UI.setAttribute(\"2\", \"textColor\", \"#ff0000\")\r\n    self.UI.setAttribute(\"3\", \"textColor\", \"#ff0000\")\r\n    \r\n    self.UI.show(\"suit_buttons\")\r\nend\r\n\r\nfunction hideSuitButtons()\r\n    self.UI.hide(\"suit_buttons\")\r\nend\r\n\r\nfunction showSuitText(params)\r\n    hideSuitButtons()\r\n    hideCrankText()\r\n\r\n    self.UI.setValue(\"suit_text\", params.value)\r\n    self.UI.setAttribute(\"suit_text\", \"color\", params.color)\r\n    self.UI.show(\"suit_text\")\r\nend\r\n\r\nfunction hideSuitText()\r\n    self.UI.hide(\"suit_text\")\r\nend\r\n\r\nfunction showCrankText(params)\r\n    hideSuitButtons()\r\n    hideSuitText()\r\n\r\n    self.UI.setValue(\"crank_text\", params.value)\r\n    self.UI.show(\"crank_text\")\r\nend\r\n\r\nfunction hideCrankText()\r\n    self.UI.hide(\"crank_text\")\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "<Defaults>\r\n  <Button width=\"100\" height=\"100\" fontSize=\"75\" onClick=\"onClick\" fontStyle=\"Bold\"/>\r\n  <Text width=\"200\" height=\"200\" fontSize=\"150\" fontStyle=\"Bold\"/>\r\n</Defaults>\r\n\r\n<Panel id=\"suit_buttons\" position=\"0 -375 -200\">\r\n  <Button id=\"3\" offsetXY=\"-165 0\">♥</Button>\r\n  <Button id=\"1\" offsetXY=\"-55 0\">♣</Button>\r\n  <Button id=\"2\" offsetXY=\"55 0\">♦</Button>\r\n  <Button id=\"4\" offsetXY=\"165 0\">♠</Button>\r\n</Panel>\r\n\r\n<Panel position=\"0 -375 -200\">\r\n  <Text id=\"suit_text\" offsetXY=\"0 0\">♥</Text>\r\n</Panel>\r\n\r\n<Panel position=\"0 -375 -200\">\r\n  <Text id=\"crank_text\" color=\"#ffff00\" offsetXY=\"0 0\">0</Text>\r\n</Panel>"
    }
  ]
}